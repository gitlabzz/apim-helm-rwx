agents:
  central:
    clientId: amplify-client
    environment: test
    organizationId: 230.........343
    privateKey: []
    privateKeyLocation: null
    publicKey: []
    publicKeyLocation: null
  discovery:
    agentName: test
    apimanager:
      host: 100.66.229.184
      insecureSSL: "false"
      password: changeme
      port: 8075
      username: apiadmin
    enabled: false
    image: v7-discovery-agent
    imageTag: 1.1.6
    labels: {}
    livenessProbe:
      httpGet:
        httpHeaders:
        - name: k8sprobe
          value: liveness.discoveryAgent
        path: /status
        port: 8989
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 1
    logLevel: info
    logOutput: stdout
    logPath: logs
    podAnnotations: {}
    readinessProbe:
      httpGet:
        httpHeaders:
        - name: k8sprobe
          value: readiness.discoveryAgent
        path: /status
        port: 8989
        scheme: HTTP
      initialDelaySeconds: 20
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicas: 1
  dockerRepository: axway.jfrog.io/ampc-public-docker-release/agent
  existingSecret: null
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  updateStrategy: {}
analytics:
  args:
  - /opt/Axway/analytics/posix/bin/start-emt-analytics
  config: {}
  containerPorts:
    aga: 8040
  enabled: true
  extraEnvs: []
  extraVolumeMounts: []
  extraVolumes: []
  httpproxy:
    enabled: true
    fqdn: aga-sitk8apim.bcthk.info
    name: analytics
    port: 8040
    protocol: tls
    secretName: cert-delegation/tls-secret
  image: apim/apim_aga_healthcheck_202202
  imagePullPolicy: IfNotPresent
  imageTag: "1"
  jvm:
    config: |
      <ConfigurationFragment>
         <VMArg name="-DCASSANDRA_PROTOCOL_VERSION=4" />
         <VMArg name="-Dio.swagger.parser.util.RemoteUrl.trustAll=true"/>
         <VMArg name="-Dio.swagger.v3.parser.util.RemoteUrl.trustAll=true"/>
      </ConfigurationFragment>
    enabled: false
  lifecycle:
    preStop:
      exec:
        command:
        - sleep
        - "10"
  livenessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: liveness.analytics
      path: /healthcheck
      port: aga
      scheme: HTTPS
    initialDelaySeconds: 300
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 15
  name: apimanalytics
  nameOverride: ""
  podAnnotations: {}
  readinessProbe:
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: readiness.analytics
      path: /healthcheck
      port: aga
      scheme: HTTPS
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 750Mi
  securityContext: {}
  service:
    annotations: {}
    labels: {}
    loadBalancerIP: ""
    ports:
    - ingress:
        enabled: true
        host: aga
      name: aga
      nodePort: ""
      port: 8040
      targetPort: 8040
    type: ClusterIP
  updateStrategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
anm:
  affinity: {}
  args:
  - /opt/Axway/apigateway/posix/bin/start-emt-nodemanager
  config:
    emtDeploymentEnabled: "true"
  containerPorts:
    anm: 8090
  enabled: true
  extraEnvs: []
  extraVolumeMounts: []
  extraVolumes: []
  httpproxy:
    enabled: true
    fqdn: anm-sitk8apim.bcthk.info
    name: anm
    port: 8090
    protocol: tls
    secretName: cert-delegation/tls-secret
  image: apim/apim_anm_202202_2022050401
  imagePullSecrets:
  - name: registrypullsecret
  imageTag: "1"
  jvm:
    config: |
      <ConfigurationFragment>
         <VMArg name="-Ddont.expect.100.continue=true"/>
      </ConfigurationFragment>
    enabled: true
  labels: {}
  livenessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: liveness.anm
      - name: Authorization
        value: Basic YXBpLXNpdC1heHdheTpBeHdheUAxMjM0
      path: /api/topology/version
      port: anm
      scheme: HTTPS
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    timeoutSeconds: 5
  name: anm
  nameOverride: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  readinessProbe:
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: readiness.anm
      - name: Authorization
        value: Basic YXBpLXNpdC1heHdheTpBeHdheUAxMjM0
      path: /api/topology/version
      port: anm
      scheme: HTTPS
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 500Mi
  secretMounts: []
  securityContext: {}
  service:
    annotations: {}
    labels: {}
    loadBalancerIP: ""
    nodePort: ""
    port: 8090
    type: ClusterIP
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  volumeMountsPaths:
    audit: ""
    events: ""
apimgr:
  args:
  - /opt/Axway/apigateway/posix/bin/start-emt-instance
  config:
    emtDeploymentEnabled: "true"
  containerPorts:
    manager: 8075
  enabled: true
  extraEnvs:
  - name: SMTP_HOST
    value: bctrelay.ad01.bcthk.com
  - name: SMTP_PORT
    value: "25"
  - name: SMTP_CONNTYPE
    value: NONE
  extraVolumeMounts: []
  extraVolumes: []
  httpproxy:
    enabled: true
    fqdn: manager-sitk8apim.bcthk.info
    name: apimgr
    port: 8075
    protocol: tls
    secretName: cert-delegation/tls-secret
  image: apim/apimgr_snapshot
  imagePullSecrets:
  - name: registrypullsecret
  imageTag: latest
  jvm:
    config: |
      <ConfigurationFragment>
         <VMArg name="-DCASSANDRA_PROTOCOL_VERSION=4" />
         <VMArg name="-Dio.swagger.parser.util.RemoteUrl.trustAll=true"/>
         <VMArg name="-Dio.swagger.v3.parser.util.RemoteUrl.trustAll=true"/>
      </ConfigurationFragment>
    enabled: true
  lifecycle:
    preStop:
      exec:
        command:
        - sleep
        - "10"
  livenessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: liveness.apimgr
      path: /
      port: manager
      scheme: HTTPS
    initialDelaySeconds: 300
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 15
  name: apimmgmt
  nameOverride: ""
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  readinessProbe:
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: readiness.apimgr
      path: /
      port: manager
      scheme: HTTPS
    initialDelaySeconds: 30
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 750Mi
  secretMounts: []
  securityContext: {}
  service:
    annotations: {}
    labels: {}
    loadBalancerIP: ""
    ports:
    - ingress:
        enabled: true
        host: manager
      name: manager
      nodePort: ""
      port: 8075
      targetPort: 8075
    type: ClusterIP
  updateStrategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  volumeMountsPaths:
    events: ""
apiportal:
  affinity: {}
  args: []
  command: []
  config:
    clamAv: null
    informationSource: null
    loginProtection: null
    master: {}
    monitoringRange: null
    redirectAfterLogin: null
    sessionTimeout: null
    ssl:
      enabled: true
      existingSecret: ""
      generateCertificates: true
    sso: null
    tryIt: null
    whitelist: null
  containerPorts:
    apiportal: 443
  dockerRepository: ""
  enabled: true
  extraContainers: []
  extraEnvs: []
  extraVolumeMounts: []
  extraVolumes: []
  httpproxy:
    enabled: true
    fqdn: apiportal-sitk8apim.bcthk.info
    name: apiportal
    port: 443
    protocol: tls
    secretName: cert-delegation/tls-secret
  image: apim/apim_apiportal_202202
  imageTag: "1"
  labels: {}
  livenessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: liveness.apiportal
      path: /
      port: apiportal
      scheme: HTTPS
    initialDelaySeconds: 60
    periodSeconds: 60
    successThreshold: 1
    timeoutSeconds: 5
  nameOverride: ""
  nodeSelector: {}
  persistence:
    enabled: true
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1048
    runAsUser: 1048
  readinessProbe:
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: readiness.apiportal
      path: /
      port: apiportal
      scheme: HTTPS
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  redis:
    cacheTimeout: "600"
    enabled: false
    host: apiportal-redis-headless
    internal: false
    port: "6379"
  replicas: 2
  resources:
    limits:
      cpu: 500m
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 500Mi
  secretMounts: []
  securityContext: {}
  service:
    annotations: {}
    labels: {}
    loadBalancerIP: ""
    nodePort: ""
    port: 443
    type: ClusterIP
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
apiportalredis:
  architecture: standalone
  auth:
    enabled: false
  fullnameOverride: apiportal-redis
  nameOverride: apiportal-redis
apitraffic:
  args:
  - /opt/Axway/apigateway/posix/bin/start-emt-instance
  config:
    emtDeploymentEnabled: true
  containerPorts:
    oauth: 8089
    plain: 8080
    tls: 8081
    traffic: 8065
  enabled: true
  extraContainers: []
  extraEnvs: []
  extraVolumeMounts: []
  extraVolumes: []
  httpproxyOauth:
    enabled: true
    fqdn: oauth-sitk8apim.bcthk.info
    name: oauth
    port: 8089
    protocol: tls
    secretName: cert-delegation/tls-secret
    svcname: traffic
  httpproxyTls:
    enabled: true
    fqdn: tls-sitk8apim.bcthk.info
    name: tls
    port: 8081
    protocol: tls
    secretName: cert-delegation/tls-secret
    svcname: traffic
  httpproxyTraffic:
    enabled: true
    fqdn: traffic-sitk8apim.bcthk.info
    name: traffic
    port: 8065
    protocol: tls
    secretName: cert-delegation/tls-secret
    svcname: traffic
  image: apim/apimgr_snapshot
  imagePullSecrets:
  - name: registrypullsecret
  imageTag: latest
  jvm:
    config: |
      <ConfigurationFragment>
         <VMArg name="-DCASSANDRA_PROTOCOL_VERSION=4" />
         <VMArg name="-Dio.swagger.parser.util.RemoteUrl.trustAll=true"/>
         <VMArg name="-Dio.swagger.v3.parser.util.RemoteUrl.trustAll=true"/>
      </ConfigurationFragment>
    enabled: true
  lifecycle:
    preStop:
      exec:
        command:
        - sleep
        - "10"
  livenessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: liveness.apimgr
      path: /healthcheck
      port: plain
      scheme: HTTP
    initialDelaySeconds: 300
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 15
  name: apitraffic
  nameOverride: ""
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  readinessProbe:
    httpGet:
      httpHeaders:
      - name: k8sprobe
        value: readiness.apimgr
      path: /healthcheck
      port: plain
      scheme: HTTP
    initialDelaySeconds: 40
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1536Mi
    requests:
      cpu: 200m
      memory: 1536Mi
  secretMounts: []
  service:
    annotations: {}
    labels: {}
    loadBalancerIP: ""
    ports:
    - ingress:
        enabled: true
        host: traffic
      name: traffic
      nodePort: ""
      port: 8065
      targetPort: 8065
    - ingress:
        enabled: true
        host: oauth
      name: oauth
      nodePort: ""
      port: 8089
      targetPort: 8089
    - ingress:
        enabled: true
        host: tls
      name: tls
      nodePort: ""
      port: 8081
      targetPort: 8081
    - ingress:
        enabled: false
        host: plain
      name: plain
      nodePort: ""
      port: 8080
      targetPort: 8080
    type: ClusterIP
  updateStrategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  volumeMountsPaths:
    events: ""
    opentraffic: ""
base:
  imageName: null
  imageTag: null
  useImagestream: false
cassandra:
  cluster:
    keyspace: axway-apim-management
    name: axway-apim-management
  dbUser:
    existingSecret: ""
    password: cassandra
    user: cassandra
  fullnameOverride: cassandra
  internal: false
  metrics:
    enabled: false
  nameOverride: cassandra
  persistence:
    enabled: true
    size: 8Gi
    storageClass: bct-tanzu-sp-dr
  service:
    host1: 192.168.235.37
    host2: 192.168.235.39
    host3: 192.168.235.40
    port1: "9042"
    port2: "9042"
    port3: "9042"
    read: LOCAL_QUORUM
    replication: "3"
    write: LOCAL_QUORUM
externalApiportalDB:
  env:
  - name: MYSQL_HOST
    value: 192.168.235.36
  - name: MYSQL_PORT
    value: "3306"
  - name: MYSQL_DATABASE
    value: sit_api_portal
  - name: MYSQL_USER
    value: axway
  - name: MYSQL_PASSWORD
    valueFrom:
      secretKeyRef:
        key: dbPasswordKey
        name: sit-analytics-mysql
externalMetricsDB:
  env:
  - name: METRICS_DB_URL
    value: jdbc:mysql://192.168.235.36:3306/sit_api_analytics?useSSL=false
  - name: METRICS_DB_USERNAME
    value: axway
  - name: METRICS_DB_PASS
    valueFrom:
      secretKeyRef:
        key: dbPasswordKey
        name: sit-analytics-mysql
global:
  ACCEPT_GENERAL_CONDITIONS: "yes"
  LBADDR: 10.168.31.18
  dockerRepository: harbor-np.bcthk.info
  domainName: 10.168.31.18.nip.io
  existingLicenseSecret: null
  imagePullPolicy: IfNotPresent
  imagePullSecrets:
  - name: registrypullsecret
  imageTag: "1"
  license: null
  nodeName: bct-tkc-workload-nonprod-worker-nodepool-a1-smmng-7fcb4c7fx8l8g
  platform: ""
  updateStrategy: RollingUpdate
mysqlapiportal:
  affinity: {}
  auth:
    database: apiportal
    existingSecret: ""
    password: changeme
    rootPassword: changeme
    username: report
  fullnameOverride: mysqlapiportal
  internal: false
  nameOverride: mysqlapiportal
  nodeSelector: {}
  primary:
    persistence:
      enabled: true
      existingClaim: apigw-mysql-apiportal
  securityContext: {}
  tolerations: []
mysqlmetrics:
  affinity: {}
  allowPublicKeyRetrieval: true
  auth:
    database: metrics
    existingSecret: ""
    password: changeme
    rootPassword: changeme
    username: report
  fullnameOverride: metricsdb
  image: null
  initdbScriptsConfigMap: metrics
  internal: false
  name: metricsdb
  nameOverride: metricsdb
  nodeSelector: {}
  primary:
    persistence:
      enabled: true
      existingClaim: apigw-mysql-metrics
    service:
      port: 3306
  ssl: false
  tolerations: []
pvcs:
  apiportalAdmLanguageVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: bct-tanzu-sp-dr
  apiportalCertsVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: bct-tanzu-sp-dr
  apiportalDbVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 20Gi
    storageClassName: bct-tanzu-sp-dr
  apiportalEnckeyVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: bct-tanzu-sp-dr
  apiportalImagesVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    storageClassName: bct-tanzu-sp-dr
  apiportalLanguageVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: bct-tanzu-sp-dr
  apiportalTemplatesVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: bct-tanzu-sp-dr
  audit:
    auditVolumeClaim:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: bct-tanzu-sp-dr
    enabled: true
  events:
    enabled: true
    eventsVolumeClaim:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: bct-tanzu-sp-dr
  metricsDbVolumeClaim:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    storageClassName: bct-tanzu-sp-dr
  opentraffic:
    enabled: true
    opentrafficVolumeClaim:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: bct-tanzu-sp-dr
  trace:
    enabled: true
    traceVolumeClaim:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
      storageClassName: bct-tanzu-sp-dr
