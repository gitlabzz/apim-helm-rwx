{
  "swagger" : "2.0",
  "info" : {
    "version" : "1.0.0",
    "title" : "API Gateway API v1.0",
    "contact" : {
      "email" : "support@axway.com"
    },
    "license" : {
      "name" : "Copyright Axway 2022. All rights reserved."
    }
  },
  "basePath" : "/api",
  "tags" : [ {
    "name" : "AMA API"
  }, {
    "name" : "Admin Users API"
  }, {
    "name" : "Configuration API"
  }, {
    "name" : "Deployment API"
  }, {
    "name" : "Web Service Discovery"
  }, {
    "name" : "Domain Audit API"
  }, {
    "name" : "Management API"
  }, {
    "name" : "Monitoring API"
  }, {
    "name" : "Role Based Access Control"
  }, {
    "name" : "Analytics"
  }, {
    "name" : "Topology API"
  }, {
    "name" : "KPS API"
  } ],
  "paths" : {
    "/router/service/{instance}/api/ama/topics/{id}" : {
      "put" : {
        "tags" : [ "AMA API" ],
        "summary" : "Create topic",
        "description" : "Create the designated topic",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DestinationInfo"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "delete" : {
        "tags" : [ "AMA API" ],
        "summary" : "Delete topic",
        "description" : "Delete the designated topic",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List queues",
        "description" : "Get list of available queues",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DestinationInfo"
              }
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/topics" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List topics",
        "description" : "Get list of available topics",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "hideAdvisory",
          "in" : "query",
          "description" : "Advanced display mode: if value is true, advisory topics will be also returned",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DestinationInfo"
              }
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/tempqueues" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List temporary queues",
        "description" : "Get list of available temporary queues",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DestinationInfo"
              }
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/temptopics" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List temporary topics",
        "description" : "Get list of available temporary topics",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "hideAdvisory",
          "in" : "query",
          "description" : "Advanced display mode: if value is true, advisory topics will be also returned",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DestinationInfo"
              }
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{id}" : {
      "put" : {
        "tags" : [ "AMA API" ],
        "summary" : "Create queue",
        "description" : "Create the designated queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DestinationInfo"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "delete" : {
        "tags" : [ "AMA API" ],
        "summary" : "Delete queue",
        "description" : "Delete the designated queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/tempqueues/{id}" : {
      "delete" : {
        "tags" : [ "AMA API" ],
        "summary" : "Delete temporary queue",
        "description" : "Delete the designated temporary queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/temptopics/{id}" : {
      "delete" : {
        "tags" : [ "AMA API" ],
        "summary" : "Delete temporary topic",
        "description" : "Delete the designated temporary topic",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{id}/consumers" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List consumers of  a queue",
        "description" : "List all consumers accessing the targeted queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ConsumerInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/topics/{id}/consumers" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List consumers of a topic",
        "description" : "List all consumers accessing the targeted topic",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ConsumerInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/consumers" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List all consumers",
        "description" : "List all known active consumers",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "advanced",
          "in" : "query",
          "description" : "Advanced display mode: if value is true, remote brokers will be included in the result",
          "required" : true,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ConsumerInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{id}/messages" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List messages in a queue",
        "description" : "List all messages in the targeted queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Optional maximum number of elements to return",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "ago",
          "in" : "query",
          "description" : "Select elements with JMSTimestamp more recent than the given period",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "The field used to select elements",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "op",
          "in" : "query",
          "description" : "The operation to apply to the selected field (eq, lt, gt, le, ge)",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "The field value to check using the selected operation",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MessageInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/topics/{id}/messages" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List messages in a topic",
        "description" : "List all messages in the targeted topic",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Optional maximum number of elements to return",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "ago",
          "in" : "query",
          "description" : "Select elements with JMSTimestamp more recent than the given period",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "The field used to select elements",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "op",
          "in" : "query",
          "description" : "The operation to apply to the selected field (eq, lt, gt, le, ge)",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "The field value to check using the selected operation",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MessageInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/tempqueues/{id}/messages" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List messages in a temporary queue",
        "description" : "List all messages in the targeted temporary queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Optional maximum number of elements to return",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "ago",
          "in" : "query",
          "description" : "Select elements with JMSTimestamp more recent than the given period",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "The field used to select elements",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "op",
          "in" : "query",
          "description" : "The operation to apply to the selected field (eq, lt, gt, le, ge)",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "The field value to check using the selected operation",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MessageInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/temptopics/{id}/messages" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List messages in a temporary topic",
        "description" : "List all messages in the targeted temporary topic",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Optional maximum number of elements to return",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "ago",
          "in" : "query",
          "description" : "Select elements with JMSTimestamp more recent than the given period",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "field",
          "in" : "query",
          "description" : "The field used to select elements",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "op",
          "in" : "query",
          "description" : "The operation to apply to the selected field (eq, lt, gt, le, ge)",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "value",
          "in" : "query",
          "description" : "The field value to check using the selected operation",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MessageInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{id}/purge" : {
      "post" : {
        "tags" : [ "AMA API" ],
        "summary" : "Purge messages in a queue",
        "description" : "Purge all messages from targeted queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{qid}/messages/{mid}" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get message content",
        "description" : "Read targeted message in the designated queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "getContent",
          "in" : "query",
          "description" : "Return message content (0: no, 1:yes, 2:truncated string if not binary content only)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BrokerMessage"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "delete" : {
        "tags" : [ "AMA API" ],
        "summary" : "Delete message",
        "description" : "Delete targeted message in the designated queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/tempqueues/{id}/purge" : {
      "post" : {
        "tags" : [ "AMA API" ],
        "summary" : "Purge messages in a temporary queue",
        "description" : "Purge all messages from targeted temporary queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/tempqueues/{qid}/messages/{mid}" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get message content",
        "description" : "Read targeted message in the designated temporary queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "getContent",
          "in" : "query",
          "description" : "Return message content (0: no, 1:yes, 2:truncated string if not binary content only)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BrokerMessage"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "delete" : {
        "tags" : [ "AMA API" ],
        "summary" : "Delete message",
        "description" : "Delete targeted message in the designated temporary queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{qid}/messages/{mid}/body" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get message data",
        "description" : "Read data of targeted message in the designated queue",
        "produces" : [ "application/x-download", "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "User-Agent",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/temp queues/{qid}/messages/{mid}/body" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get message data",
        "description" : "Read data of targeted message in the designated temporary queue",
        "produces" : [ "application/x-download", "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "User-Agent",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/topics/{qid}/messages/{mid}" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get message content",
        "description" : "Read targeted message in the designated topic",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "getContent",
          "in" : "query",
          "description" : "Return message content (0: no, 1:yes, 2:truncated string if not binary content only)",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/BrokerMessage"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/topics/{qid}/messages/{mid}/body" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get message data",
        "description" : "Read data of targeted message in the designated topic",
        "produces" : [ "application/x-download", "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "User-Agent",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{qid}/messages/{mid}/move" : {
      "post" : {
        "tags" : [ "AMA API" ],
        "summary" : "Move message from one queue to another",
        "description" : "Move targeted message to the designated queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "destination",
          "in" : "query",
          "description" : "Destination queue name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{qid}/messages/{mid}/copy" : {
      "post" : {
        "tags" : [ "AMA API" ],
        "summary" : "Copy message from one queue to another",
        "description" : "Copy targeted message to the designated queue",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "mid",
          "in" : "path",
          "description" : "Message id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "destination",
          "in" : "query",
          "description" : "Destination queue name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/queues/{qid}/messages" : {
      "post" : {
        "tags" : [ "AMA API" ],
        "summary" : "Send message",
        "description" : "Send message in the designated queue",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "messageType",
          "in" : "formData",
          "description" : "Message type: BINARY or TEXT",
          "required" : true,
          "type" : "string",
          "default" : "BINARY",
          "enum" : [ "TEXT", "BINARY" ]
        }, {
          "name" : "messageData",
          "in" : "formData",
          "description" : "Message content",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "jmsreplyTo",
          "in" : "formData",
          "description" : "JMS ReplyTo",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "jmsdeliveryMode",
          "in" : "formData",
          "description" : "JMS DeliveryMode",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "jmscorrelationID",
          "in" : "formData",
          "description" : "JMS CorrelationID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "jmsexpiration",
          "in" : "formData",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "name" : "jmspriority",
          "in" : "formData",
          "description" : "JMS Priority",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "jmsredelivered",
          "in" : "formData",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "jmstimestamp",
          "in" : "formData",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "name" : "jmstype",
          "in" : "formData",
          "description" : "JMS Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "jmspropertyName",
          "in" : "formData",
          "description" : "JMS property name",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "jmspropertyValue",
          "in" : "formData",
          "description" : "JMS property value",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "put" : {
        "tags" : [ "AMA API" ],
        "summary" : "Send message",
        "description" : "Send message in the designated queue",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Queue id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BrokerMessage"
          }
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MessageInfo"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/topics/{qid}/messages" : {
      "post" : {
        "tags" : [ "AMA API" ],
        "summary" : "Send message",
        "description" : "Send message in the designated topic",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "messageType",
          "in" : "formData",
          "description" : "Message type: BINARY or TEXT",
          "required" : true,
          "type" : "string",
          "default" : "BINARY",
          "enum" : [ "TEXT", "BINARY" ]
        }, {
          "name" : "messageData",
          "in" : "formData",
          "description" : "Message content",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "jmsreplyTo",
          "in" : "formData",
          "description" : "JMS ReplyTo",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "jmsdeliveryMode",
          "in" : "formData",
          "description" : "JMS DeliveryMode",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "jmscorrelationID",
          "in" : "formData",
          "description" : "JMS CorrelationID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "jmsexpiration",
          "in" : "formData",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "name" : "jmspriority",
          "in" : "formData",
          "description" : "JMS Priority",
          "required" : true,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "jmsredelivered",
          "in" : "formData",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "jmstimestamp",
          "in" : "formData",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "name" : "jmstype",
          "in" : "formData",
          "description" : "JMS Type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "jmspropertyName",
          "in" : "formData",
          "description" : "JMS property name",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "jmspropertyValue",
          "in" : "formData",
          "description" : "JMS property value",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "put" : {
        "tags" : [ "AMA API" ],
        "summary" : "Send message",
        "description" : "Send message in the designated topic",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "qid",
          "in" : "path",
          "description" : "Topic id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BrokerMessage"
          }
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MessageInfo"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/subscribers" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "List subscriber",
        "description" : "list existing durable subscriber",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SubscriberInfo"
              }
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "post" : {
        "tags" : [ "AMA API" ],
        "summary" : "Create subscriber",
        "description" : "Create new durable subscription",
        "consumes" : [ "application/x-www-form-urlencoded", "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SubscriberInfo"
          }
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      },
      "delete" : {
        "tags" : [ "AMA API" ],
        "summary" : "Delete subscriber",
        "description" : "Delete durable subscription",
        "consumes" : [ "application/x-www-form-urlencoded", "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "clientId",
          "in" : "query",
          "description" : "Subscriber client id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "subscriberName",
          "in" : "query",
          "description" : "Subscription name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/connections/{cid}" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get connection info",
        "description" : "Get details of active connection",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "cid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ConnectionInfo"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/status" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get service status",
        "description" : "Returns service status object, which included enabled field indicating if AMA service has been enabled or not",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StatusInfo"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/ama/statistics" : {
      "get" : {
        "tags" : [ "AMA API" ],
        "summary" : "Get statistics",
        "description" : "Get all statistics for all queues and topics",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StatisticsContainer"
            }
          },
          "500" : {
            "description" : "Error details returned in response"
          }
        }
      }
    },
    "/adminusers/passwordpolicy" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Returns the current password policy for admin users.",
        "description" : "Returns the current password policy for admin users.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PasswordPolicy"
              }
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Save password policy for admin users on disk",
        "description" : "Save password policy for admin users on disk",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "PasswordPolicy",
          "description" : "The Password Policy parameters to store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PasswordPolicy"
          }
        }, {
          "name" : "propagateStore",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Assertions"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers/advisorybanner" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "",
        "description" : "",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AdvisoryBanner"
          }
        }, {
          "name" : "propagate",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/adminusers/users" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Get all admin users",
        "description" : "Get all admin users",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUser"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Create an admin user.",
        "description" : "Create an admin user. The password is sent in the clear in the request body, but this will be sent over SSL. The password is encrypted before being written to the Admin User Store, i.e. the VDISTDIR/conf/adminUsers.json file.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AdminUserRequest"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUser"
              }
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers/users/{userID}" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Get a particular admin user",
        "description" : "Get a particular admin user",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userID",
          "in" : "path",
          "description" : "The id of the admin user to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUser"
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Updates an admin user.",
        "description" : "Update an admin user's roles, or password. It is possible to update the user roles without updating the password, (leave out the password in the request body). It is possible to update the user's password only, (leave out the adminUser in the request body). It is possible to update the user's roles and password at the same time. The id or name of a user cannot be updated.The password is sent in the clear in the request body, but this will be sent over SSL. The password is encrypted before being written to the Admin User Store, i.e. the VDISTDIR/conf/adminUsers.json file.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userID",
          "in" : "path",
          "description" : "The admin user to be updated",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AdminUserRequest"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUser"
              }
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Deletes an admin user.",
        "description" : "Deletes an admin user.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userID",
          "in" : "path",
          "description" : "The admin user to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers/users/password" : {
      "post" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Reset logged-in user password.",
        "description" : "Modify the password of the authenticated user.",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "oldPassword",
          "in" : "formData",
          "description" : "The user's old password",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "newPassword",
          "in" : "formData",
          "description" : "The user's new password",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Not Found"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers/roles" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Get all admin user roles.",
        "description" : "Get all admin user roles.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUserRole"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Create an admin user role.",
        "description" : "Create an admin user role.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AdminUserRole"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUserRole"
              }
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers/roles/{roleID}" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Get a particular admin user role.",
        "description" : "Get a particular admin user role.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roleID",
          "in" : "path",
          "description" : "The role to be returned",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUserRole"
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Deletes a role.",
        "description" : "Deletes a role.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roleID",
          "in" : "path",
          "description" : "The role to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "404" : {
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Get the admin users store",
        "description" : "Get the admin users store",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUserStore"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Updates the Admin User Store on disk.",
        "description" : "Updates the Admin User Store on disk. Used to replicate version across Node Managers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AdminUserStore"
          }
        }, {
          "name" : "propagateStore",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUserStore"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers/strongpassword" : {
      "post" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Validates if the supplied password is strong enough according to the active password policy.",
        "description" : "Validates if the supplied password is strong enough according to the active password policy.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PasswordValidationRequest"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PasswordStatus"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/adminusers/version" : {
      "get" : {
        "tags" : [ "Admin Users API" ],
        "summary" : "Get the version of the admin user store",
        "description" : "Get the admin users store",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AdminUsersVersion"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/router/service/{instance}/api/configuration/archiveId" : {
      "get" : {
        "tags" : [ "Configuration API" ],
        "summary" : "Get the archive id of the API Server's currently loaded Deployment Archive.",
        "description" : "Get the archive id of the API Server's currently loaded Deployment Archive.The same information can be retrieved from the Node Manager's Deployment API method GET /api/deployment/domain/deployments.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/configuration/upload" : {
      "post" : {
        "tags" : [ "Configuration API" ],
        "summary" : "Upload a configuration (Deployment Archive) to this API Gateway.",
        "description" : "Called by a client application to upload a new configuration (Deployment Archive) to an API Gateway that is running in EMT mode. This method must be followed by a call to load the new configuration.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeploymentArchive"
          }
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/configuration" : {
      "put" : {
        "tags" : [ "Configuration API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "archiveId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseDeploymentResult"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/configuration/archive" : {
      "get" : {
        "tags" : [ "Configuration API" ],
        "summary" : "Get the Deployment Archive currently deployed to this API Gateway.",
        "description" : "Get the Deployment Archive currently deployed to this API Gateway.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseArchive"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/configuration/waf-update" : {
      "put" : {
        "tags" : [ "Configuration API" ],
        "summary" : "Updates waf configuration",
        "description" : "Updates waf configuration",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/configuration/passphrase" : {
      "put" : {
        "tags" : [ "Configuration API" ],
        "summary" : "Method to set the in-memory passphrase.",
        "description" : "Method to set the in-memory passphrase. This is called internally by the Node Manager's Deployment API when the group's passphrase is reset.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdatePassphraseRequestBody"
          }
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseDeploymentResult"
            }
          }
        }
      }
    },
    "/deployment/archive/{groupID}/{archiveID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download a Deployment Archive.",
        "description" : "Get a deployment archive. The archive must be deployed to at least one API Server in the domain.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "archiveID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "local",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseArchive"
            }
          }
        }
      }
    },
    "/deployment/{transactionId}/commit" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Commits deployment transaction identified by transactionId",
        "description" : "Commits deployment transaction identified by transactionId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/deployment/create" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Creates new deployment transaction",
        "description" : "Creates new deployment transaction",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/deployment/accept" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Accepts deployment transaction",
        "description" : "Accepts deployment transaction",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "manifest",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/deployment/passphrase/group/{groupID}" : {
      "put" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Update the passphrase for a group's Deployment Archives.",
        "description" : "This method updates the passphrase for a group's Deployment Archives.This method is called on the Admin Node Manager which ensures that the passphrase is updated for all archives for the group on all hosts. It ensures that the group.xml secret is updated on all hosts. It also ensures that the certs.xml is encrypted with the new passphrase for all API Server instances.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdatePassphraseRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/passphrase/nodemanager/{serviceID}" : {
      "put" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Update the passphrase for a Node Manager's configuration.",
        "description" : "Update the passphrase for a Node Manager's configuration.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdatePassphraseRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/group/configuration/{groupID}" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Upload a configuration (Deployment Archive) for a group of API Servers.",
        "description" : "Called by the client application to upload a new configuration (Deployment Archive) to all hosts that run API Servers in the group that this configuration is destined for. This method must be called before the client can invoke the Configuration API in the API Servers (via Node Manager) to load the new configuration.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeploymentArchive"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Delete a configuration",
        "description" : "Delete a configuration (Deployment Archive) for a group of API Servers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "usedArchiveID",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/group/configuration/file/{groupID}" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Upload a configuration (Deployment Archive) file as multipart/form-data for a group of API Servers.",
        "description" : "Called by the client application to upload a new configuration file (Deployment Archive) to all hosts that run API Servers in the group that this configuration is destined for. This method must be called before the client can invoke the Configuration API in the API Servers (via Node Manager) to load the new configuration.",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "CSRF-Token",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/group/configuration/file/policy/{groupID}" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Upload a Policy Archive as multipart/form-data for a group of API Servers.",
        "description" : "A client application may need to deploy a separate Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, e.g. a web-based application, as it cannot merge the .pol and .env to create a Deployment Archve (.fed) locally. For a .pol and .env deployment, the API method described here must be invoked as Step 1.The steps for deployment of a Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, (when the client application cannot merge the .pol and .env to create a .fed), are as follows:-Step 1: Upload the Policy Archive by invoking the method described here. The Node Manager copies the Policy Archive to its local disk. This method returns the id of the Policy Archive to the client application. The policy archive id must be passed in Step 2 of the .pol and .env deployment as the query string parameter relatedPolicyArchiveID.Step 2: Upload the Environment Archive, by invoking POST /api/deployment/group/configuration/file/environment/{groupID}. The Node Manager creates a merged Deployment Archive and replicates it to all hosts running API Servers in the group. This method returns the id of the Deployment Archive to the client application. The Deployment Archive id must be passed in Step 3 of the .pol and .env deployment.Step 3: Invoke the Configuration API method PUT /api/configuration?archiveId={archiveId} on each API Server in the group via the Routing API in the Node Manager to get the API Server to load the new configuration.",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "policyFile",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "CSRF-Token",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/group/configuration/file/environment/{groupID}" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Upload an Environment Archive as multipart/form-data for a group of API Servers. This is merged with a related Policy Archive to create a Deployment Archive.",
        "description" : "A client application may need to deploy a separate Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, e.g. a web-based application, as it cannot merge the .pol and .env to create a Deployment Archve (.fed) locally. For a .pol and .env deployment, the API method described here must be invoked as Step 2.The steps for deployment of a Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, (when the client application cannot merge the .pol and .env to create a .fed), are as follows:-Step 1: Upload the Policy Archive by invoking POST /api/deployment/group/configuration/file/policy/{groupID}. The Node Manager copies the Policy Archive to its local disk. This method returns the id of the Policy Archive to the client application. The policy archive id must be passed in Step 2 of the .pol and .env deployment as the query string parameter relatedPolicyArchiveID.Step 2: Upload the Environment Archive, by invoking the method described here. The Node Manager creates a merged Deployment Archive and replicates it to all hosts running API Servers in the group. This method returns the id of the Deployment Archive to the client application. The Deployment Archive id must be passed in Step 3 of the .pol and .env deployment.Step 3: Invoke the Configuration API method PUT /api/configuration?archiveId={archiveId} on each API Server in the group via the Routing API in the Node Manager to get the API Server to load the new configuration.",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "relatedPolicyArchiveID",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "CSRF-Token",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "environmentFile",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "passphrase",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/local/configuration/{groupID}" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Upload a new configuration (Deployment Archive) to all hosts that run API Servers in the group",
        "description" : "Called by the client application to upload a new configuration (Deployment Archive) to all hosts that run API Servers in the group that this configuration is destined for. This method must be called before the client can invoke the Configuration API in the API Servers (via Node Manager) to load the new configuration.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeploymentArchive"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/domain/deployments" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Get the deployment information of all API Servers in the domain.",
        "description" : "Get the deployment information of all API Servers in the domain.Note that the Deployment Archive id currently deployed to each instance is the Id value contained within the rootProperties for the instance, see example data below.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseMapStringMapStringServiceDeploymentArchiveDetails"
            }
          }
        }
      }
    },
    "/deployment/domain/deployments/withpending" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Gets all details of all the deployed configurations in a domain",
        "description" : "This method gets all details of all the deployed configurations in a domain including the configurations that are marked as pending, i.e. the deployment of the configuration is not yet complete. The actual configuration is not returned, only metadata relating to it.This method is called internally within the Node Manager, it is not actually invoked as a REST API call at all. (It may have been exposed as REST API for future proofing or is just no longer used!)While this is an internal type of method it would be OK for a customer to call, as it is only reading data.The swagger tool does not seems to show details of the object returned so I think its a bit useless in this case. This Map<String, Map<String, List ServiceDeploymentArchiveDetails seems to show up as an Object.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseMapStringMapStringListServiceDeploymentArchiveDetails"
            }
          }
        }
      }
    },
    "/deployment/local/deployments" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Returns all details of all the deployed configurations on that local host",
        "description" : "This method is called by an Admin Node Manager on a remote Node Manager. It returns all details of all the deployed configurations on that local host. The actual configuration is not returned, only metadata relating to it.While this is an internal type of method it would be OK for a customer to call, as it is only reading data.The swagger tools does not seems to show details of the object returned so I think its a bit useless in this case. This Map<String, List ServiceDeploymentArchiveDetails seems to show up as an Object.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cleanupPending",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseMapStringListServiceDeploymentArchiveDetails"
            }
          }
        }
      }
    },
    "/deployment/archive/policy/{groupID}/{archiveID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download a Policy Archive.",
        "description" : "Get a Policy Archive from a deployed Deployment Archive. The Deployment Archive must be deployed to at least one API Server in the domain.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "archiveID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "local",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseArchive"
            }
          }
        }
      }
    },
    "/deployment/archive/environment/{groupID}/{archiveID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download an Environment Archive.",
        "description" : "Get an Environment Archive from a deployed Deployment Archive. The Deployment Archive must be deployed to at least one API Server in the domain",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "archiveID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "local",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseArchive"
            }
          }
        }
      }
    },
    "/deployment/archive/service/{serviceID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download the Deployment Archive deployed to an API Server.",
        "description" : "Get the Deployment Archive currently deployed to an API Server.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseArchive"
            }
          }
        }
      }
    },
    "/deployment/archive/policy/service/{serviceID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download the Policy Archive deployed to an API Server.",
        "description" : "SGet the Policy Archive currently deployed to an API Server.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseArchive"
            }
          }
        }
      }
    },
    "/deployment/archive/environment/service/{serviceID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download the Environment Archive deployed to an API Server.",
        "description" : "Get the Environment Archive currently deployed to an API Server.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseArchive"
            }
          }
        }
      }
    },
    "/deployment/envsettings/service/{serviceID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download the Deployment Archive deployed to an API Server.",
        "description" : "Get the environmentalized settings for an API Server.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseEnvironmentalizedEntities"
            }
          }
        }
      }
    },
    "/deployment/passphrase/local/group/{groupID}" : {
      "put" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Update the passphrase for a group's Deployment Archives.",
        "description" : "This method updates the passphrase for a group's Deployment Archives.This method is called on the Admin Node Manager which ensures that the passphrase is updated for all archives for the group on all hosts. It ensures that the group.xml secret is updated on all hosts. It also ensures that the certs.xml is encrypted with the new passphrase for all API Server instances.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdatePassphraseRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/groupsettings/version" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Get the group settings version",
        "description" : "This method is called by an Admin Node Manager on a remote Admin Node Manager to retrieve the group settings version.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/deployment/groupsettings" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Get the group settings",
        "description" : "This method is called by an Admin Node Manager on a remote Node Manager to retrieve the group settings.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Save group settings for groups on disk",
        "description" : "Save group settings for groups on disk",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "GroupSettings",
          "description" : "The Group Settings parameters to store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/GroupSettings"
          }
        }, {
          "name" : "propagateStore",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Assertions"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/deployment/passphrase/local/nodemanager" : {
      "put" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Update the entity store passphrase for that Node Manager",
        "description" : "This method is called by an Admin Node Manager on a remote Node Manager to update the entity store passphrase for that Node Manager. When the entity store passphrase for the Node Manager is updated, the Node Managers entity store must be re-encrypted, and the secret in the nodemanager.xml must be updated.This method should not be called by client app. A client app should call the /passphrase/nodemanager/{serviceID} method to update the passphrase of any Node Manager in the domain.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdatePassphraseRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/group/conf/{groupID}/{filename}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Gets a file from the group conf directory.",
        "description" : "This method gets a file from the group conf directory.This method is used by managedomain when a new host is added to the domain to get group-related files for the new host. This is an internal method. It is read-only so not harmful, but does return sensitive data.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filename",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/deployment/archive/{groupID}/{archiveID}/properties/{type}" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Update Deployment Archive manifest properties.",
        "description" : "Update Deployment Archive manifest properties. This method will ensure that the properties are updated on all hosts that have this Deployment Archive on disk for the group. Note that the existing properties are completely overwritten. Updates to read-only properties e.g. Id, Timestamp, are ignored.The configuration content is not updated. Configuration refresh requests are not sent to the API Servers.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "archiveID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/local/{groupID}/archive/{archiveID}/properties/{type}" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Update metadata relating to a configuration for a group on the local host.",
        "description" : "This method is called by an Admin Node Manager on a remote Node Manager.  This method is used to update metadata relating to a configuration for a group on the local host. Calling this method does *not* result in a redeployment of the configuration to the API Gateways in the group. The metadata that can be updated are the set of properties that are related to policy or the environment parts of the configuration.This method should not be called by client app. A client app should call /archive/{groupID}/{archiveID}/properties/{type} method to update configuration metadata.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "archiveID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/{transactionId}/tag/{name}/{value}" : {
      "put" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Adds tag with name and value to a transaction identified by transactionId",
        "description" : "Adds tag with name and value to a transaction identified by transactionId",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "value",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/deployment/{transactionId}/upload" : {
      "post" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Uploads a file to a transaction identified by transactionId",
        "description" : "Uploads a file to a transaction identified by transactionId",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/deployment/envsettings/{groupID}/{archiveID}" : {
      "get" : {
        "tags" : [ "Deployment API" ],
        "summary" : "Download an Environment Archive.",
        "description" : "Get the environmentalized settings for a Deployment Archive.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "archiveID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "local",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseEnvironmentalizedEntities"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/discovery/wsdl" : {
      "get" : {
        "tags" : [ "Web Service Discovery" ],
        "summary" : "Lists all WSDL Web Services registered in the API Server.",
        "description" : "Lists all WSDL Web Services registered in the API Server. It will return the list of Web Services in Swagger format",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Swagger"
              }
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/discovery/rest" : {
      "get" : {
        "tags" : [ "Web Service Discovery" ],
        "summary" : "Lists all REST Web Services registered in the API Server.",
        "description" : "Lists all REST Web Services registered in the API Server. It will return the list of REST Web Services in Swagger format",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Swagger"
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/settings" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns audit off-load events settings",
        "description" : "Returns the domain audit off-load events settings.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns the domain audit off-load events settings.",
        "description" : "Returns the domain audit off-load events settings.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AuditSettings"
          }
        }, {
          "name" : "propagate",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "",
        "description" : "Returns all the events. A maximum number of 1000 events is returned.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/users" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all User related events. You can optionally put a limit on the amount of messages returned",
        "description" : "Returns the events of the users type. (Event ID in range 100-299). An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/applications" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all Application related events. You can optionally put a limit on the amount of messages returned",
        "description" : "Returns the events of the application type. (Event ID in range 500-699). An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/all/{num}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns the last {num} number of events of all types",
        "description" : "Returns the last {num} number of events of all events types.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "num",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/{id}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all recorded events for a specified event ID. You can optionally put a limit on the amount of messages returned",
        "description" : "Returns the events of a given ID type. An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/{id}/{num}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns recorded events for a specified event ID and {num}",
        "description" : "Returns recorded events for a specified event ID and {num}",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "num",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/user/{user}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all related events for a given user",
        "description" : "Returns the events for a user given the user's name. A maximum number of 1000 events is returned",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/outcome/{outcome}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all recorded events with the given success or failure outcome",
        "description" : "Returns all recorded events with the given success or failure outcome. A maximum number of 1000 events is returned.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "outcome",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/users/{num}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "num",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/organisations/{num}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all Organisation related events and {num} amount defined.",
        "description" : "Returns the events of the organisation type. {num} parameter returns a defined {num} number of the events.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "num",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/applications/{num}" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all Application related events.The amount returned is defined but the {num} defined",
        "description" : "Returns the events of the application type. (Event ID in range 500-699). A {num} parameter is set which returns a maximum number of the events.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "num",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/search" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Querystring search for Domain Audit events. Optional parameters are count, beginId, endId, beginTimestamp, endTimestamp and ago",
        "description" : "Performs a search through the Domain Audit events based on the following optional QueryString parameters. If a parameter is not specified in the request the default value in this table is used.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        }, {
          "name" : "beginId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "endId",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "beginTimestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "name" : "endTimestamp",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int64"
        }, {
          "name" : "ago",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "24h"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/events" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "All audit events settings",
        "description" : "Returns the domain audit events settings per category.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "All audit events settings",
        "description" : "Returns the domain audit events settings per category.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AuditEvents"
          }
        }, {
          "name" : "propagate",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/events/refresh" : {
      "put" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Refreshes audit events settings from server",
        "description" : "Refreshes the domain audit events settings from disk.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/log/reset" : {
      "post" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Logs roll-over and empty audit.log file",
        "description" : "Resets/rolls-over the domain audit log file. Creates an empty domain audit log file.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/domainaudit/organisations" : {
      "get" : {
        "tags" : [ "Domain Audit API" ],
        "summary" : "Returns all Organisation related events. You can optionally put a limit on the amount of messages returned",
        "description" : "Returns the events of the organisation type. (Event ID in range 300-499). An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server or Node Manager instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/management/servicetype" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Get the service type.",
        "description" : "Get the service type of the API Server or Node Manager. This is an internal product type string identifier e.g. VordelGateway, VordelNodeManager etc.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/servicetype for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/servicetype for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/servicetype.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/productversion" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Get details of the current product version",
        "description" : "Get details of the current product version",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseMapStringObject"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/servicename" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Get the service name",
        "description" : "et the service name of the API Server or Node Manager. This is the name used to identify the process within the domain topology.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/servicename for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/servicename for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/servicename.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Management API" ],
        "summary" : "Update the in-memory service name.",
        "description" : "Updates the in-memory service name of the API Server or Node Manager. This is the name used to identify the process within the domain topology.This method is called internally from the Node Manager's Topology API when a user updates an API Server or Node Manager name. This method should not normally be invoked any other way. This method will only update the in-memory service name of the API Server or Node Manager. For the update to be persisted into the topology, it must be done via the Topology API method PUT /api/topology/services/{groupID}.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/servicename for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/servicename for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/servicename.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/cfgevents/{eventHandler}/log" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "eventHandler",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Management API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "eventHandler",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "size",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/management/fips" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Returns the FIPS mode status for the instance",
        "description" : "Returns the status of the FIPS mode for the Domain, the setting for the Instance, and the current running mode",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/router/service/{instance}/api/management/serviceversion" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Get the service version.",
        "description" : "Get the product version of the API Server or Node Manager.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/serviceversion for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/serviceversion for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/serviceversion.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/domainid" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Get the domain id",
        "description" : "Get the domain id of the domain that the API Server or Node Manager is running in. All API Servers and Node Managers in the same domain must have the same domain id value. The domain id is assigned when the Admin Node Manager is registered.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/domainid for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/domainid for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/domainid.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/status/{groupID}/{serviceID}" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Get the Status of a API Gateway Instance",
        "description" : "Get the status of a API Gateway instanceThis method works synchronously so it will block until the APIGateway sends back its status.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/stop/{groupID}/{serviceID}" : {
      "post" : {
        "tags" : [ "Management API" ],
        "summary" : "Stop a API Gateway Instance",
        "description" : "Stop a Running API Gateway instance This method works synchronously so it will block until the APIGateway stops with success or it fails.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/start/{groupID}/{serviceID}" : {
      "post" : {
        "tags" : [ "Management API" ],
        "summary" : "Start a API Gateway Instance",
        "description" : "Start a API Gateway instance This method works synchronously so it will block until the APIGateway starts the services with success or it fails.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/management/cfgevents" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/management/cfgevents/{eventHandler}" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "eventHandler",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/management/groupname" : {
      "get" : {
        "tags" : [ "Management API" ],
        "summary" : "Get the group name.",
        "description" : "Get the name of the group that the API Server or Node Manager is running in. This is the name used to identify the group within the domain topology.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/groupname.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Management API" ],
        "summary" : "Update the in-memory group name.",
        "description" : "Update the in-memory name of the group that the API Server or Node Manager is running in. This is the name used to identify the group within the domain topology.This method is called internally from the Node Manager's Topology API when a user updates a group name. This method should not normally be invoked any other way. This method will only update the in-memory group name of the API Server or Node Manager. For the update to be persisted into the topology, it must be done via the Topology API method PUT /api/topology/groups.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/groupname.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/monitoring/events/{eventType}" : {
      "get" : {
        "tags" : [ "Monitoring API" ],
        "summary" : "Gets log, SLA, alert events",
        "description" : "Gets a list of events.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "mandatory\tOne of: log, alert, or sla",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The response body contains summary metrics data. Refer to Javadoc for com.vordel.api.monitoring.model.Summary.",
            "schema" : {
              "$ref" : "#/definitions/EventTypeResults"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseErrorMessage"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/monitoring/metrics/totals" : {
      "get" : {
        "tags" : [ "Monitoring API" ],
        "summary" : "Gets metric totals for a Metric Group",
        "description" : "This method gets metric totals for a Metric Group. Metric totals are a running total count for the group since the API Server was started. The set of metric values returned will vary depending on the metric group type.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "The metric group type, e.g. \"Service\", \"Client\", \"TargetServer\"",
          "required" : false,
          "type" : "string",
          "default" : "SystemOverview"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The metric group name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The response body contains a list of metric totals for a metric group of a particular type and name.",
            "schema" : {
              "$ref" : "#/definitions/MetricsTotalsResults"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "$ref" : "#/definitions/MetricsTotalsErrors"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/monitoring/metrics/groups" : {
      "get" : {
        "tags" : [ "Monitoring API" ],
        "summary" : "Gets metric groups",
        "description" : "A Metric Group identifies some system entity for which we are recording a set of metrics, e.g a web service, an external API, an authenticated client, an external target server etc. This method will return a list of all Metric Groups currently being monitoring by the API Server.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Filter the returned metric groups by type, e.g. \"Service\", \"Client\", \"TargetServe",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The response body contains a list of metric groups. Refer to Javadoc for com.vordel.api.monitoring.model.MetricGroup.",
            "schema" : {
              "$ref" : "#/definitions/MetricGroupListResponse"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/monitoring/metrics/metrics" : {
      "get" : {
        "tags" : [ "Monitoring API" ],
        "summary" : "Gets metric information",
        "description" : "This method retrieves information about the metrics that are currently being monitored in the API Server memory. It includes total memory usage for realtime monitoring and total number of metric groups being tracked.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "An ApiResponse containing metrics metadata as the result on a successful operation.",
            "schema" : {
              "$ref" : "#/definitions/MetricsMetadataResults"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/monitoring/metrics/summary" : {
      "get" : {
        "tags" : [ "Monitoring API" ],
        "summary" : "Gets metric summary for a Metric Group",
        "description" : "This method gets metric totals for a Metric Group Type (or specific named group) for a time window. Totals metrics give a total count for the metric values since the API Server when started. Totals metrics may be used to give a summary of metric data. They should not be used to graph metric data over time. The set of values returned will depend on the type of the metric group, as different metrics are generated for different metric group types.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricGroupType",
          "in" : "query",
          "description" : "The metric group type, e.g. \"Service\", \"Client\", \"TargetServer",
          "required" : false,
          "type" : "string",
          "default" : "SystemOverview"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The metric group name. If the name is not specified, it sums all of the groups of the metricGroupType together.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "timeline",
          "in" : "query",
          "description" : "The time window interval; one of 10m, 10h, 5d This defaults to *10m*.",
          "required" : false,
          "type" : "string",
          "default" : "10m"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The response body contains a list of maps of metrics.",
            "schema" : {
              "$ref" : "#/definitions/MetricsSummaryResults"
            }
          },
          "404" : {
            "description" : "Not Found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ValidationError"
              }
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/monitoring/metrics/timeline" : {
      "get" : {
        "tags" : [ "Monitoring API" ],
        "summary" : "Gets metric timeline for a Metric Group",
        "description" : "Timeline metrics may be used to graph metric values over time. If real-time monitoring is enabled, the API Server maintains in-memory metrics for 3 timeline periods as follows:-\n\nthe last 10 minutes\nthe last 10 hours\nthe last 5 days\nFor each timeline period, 120 data points are maintained. This means:-\n\nfor the 10 minute timeline period, there is a data point every 5 seconds\nfor the 10 hour timeline period, there is a data point every 5 minutes\nfor the 5 day timeline period, there is a data point every 1 hour.\nThis means that the data is at its most fine-grained for the shortest timeline period",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricGroupType",
          "in" : "query",
          "description" : "The metric group type, e.g. \"Service\", \"Client\", \"TargetServer\". This defaults to *SystemOverview*.",
          "required" : false,
          "type" : "string",
          "default" : "SystemOverview"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "The metric group name. If the name is not specified, it sums all of the groups of the *metricGroupType* together.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "parentName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "metricType",
          "in" : "query",
          "description" : "The metric type name; multiple names can be specified for additional series. This defaults to *successes*",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "default" : "successes"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "timeline",
          "in" : "query",
          "description" : "The time window interval; one of 10m, 10h, 5d This defaults to *10m*",
          "required" : false,
          "type" : "string",
          "default" : "10m"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "An ISO-8601 standard web date (e.g. 2012-04-11T14:09:50Z) or a reference (e.g. 5minutes) If not specified, it defaults to the full timeline interval.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The response body contains a list of maps of metrics.",
            "schema" : {
              "$ref" : "#/definitions/MetricTimelineResponse"
            }
          },
          "404" : {
            "description" : "Metrics are requested for a metric group that does not currently exist in memory, or, an attempt is made to request an unsupported timeline period.",
            "schema" : {
              "$ref" : "#/definitions/MetricsTimelineErrors"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/monitoring/summary" : {
      "get" : {
        "tags" : [ "Monitoring API" ],
        "summary" : "Gets summary metrics",
        "description" : "This method retrieves summary API Server status information. This status information includes metrics totals for the API Server, e.g. the number of passed requests, failed requests and exception requests.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The response body contains summary metrics data.",
            "schema" : {
              "$ref" : "#/definitions/SummaryResponse"
            }
          }
        }
      }
    },
    "/rbac/login" : {
      "post" : {
        "tags" : [ "Role Based Access Control" ],
        "summary" : "Login",
        "description" : "",
        "parameters" : [ {
          "name" : "username",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/rbac/logout" : {
      "get" : {
        "tags" : [ "Role Based Access Control" ],
        "summary" : "Logs out a user by returning a redirect with URL containing invalid credentials",
        "description" : "",
        "parameters" : [ {
          "name" : "request.preventCache",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "301" : {
            "description" : "Moved Permanently"
          }
        }
      }
    },
    "/rbac/permissions/roles" : {
      "get" : {
        "tags" : [ "Role Based Access Control" ],
        "summary" : "Returns a list of roles and permissions ACL available per role.",
        "description" : "If role __name__ are not supplied, all roles are returned.  If role __name__ are supplied, ACL permissions are returned per requested role(s).",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "The role names to get",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ACLPermissions"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/rbac/permissions/currentuser" : {
      "get" : {
        "tags" : [ "Role Based Access Control" ],
        "summary" : "Returns the user permissions of the current user",
        "description" : "Returns the user permissions of the current user",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserPermissions"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/rbac/currentuser" : {
      "get" : {
        "tags" : [ "Role Based Access Control" ],
        "summary" : "Returns the name of the current user",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/rbac/currentuser/sso/post" : {
      "post" : {
        "tags" : [ "Role Based Access Control" ],
        "summary" : "Returns the name of the current user",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "SAMLResponse",
          "in" : "formData",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/rbac/permissions" : {
      "get" : {
        "tags" : [ "Role Based Access Control" ],
        "summary" : "Deprecated.",
        "description" : "Deprecated - use [/permissions/roles](#RBACServiceprocessRolesPermissionsGet) instead",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "role",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "deprecated" : true,
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/currentuser" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "return the current logged in user in a User object",
        "description" : "returns the current logged in user in a User object",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "404" : {
            "description" : "Analytics is disabled"
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/custom/{reportid}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a report by ID.",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "reportid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CustomReport"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Analytics" ],
        "summary" : "Updates a report by ID.",
        "description" : "",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The report to update.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomReport"
          }
        }, {
          "name" : "reportid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CustomReport"
            }
          },
          "404" : {
            "description" : "Not Found"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Analytics" ],
        "summary" : "Deletes a report by ID.",
        "description" : "",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "reportid",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/audit/payload/{auditId}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets an audit message payload.",
        "description" : "Gets an audit message payload.",
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "name" : "auditId",
          "in" : "path",
          "description" : "The audit log ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "404" : {
            "description" : "Not Found"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Check that the server is alive",
        "description" : "Returns 'OK'",
        "produces" : [ "text/plain" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/reports/metrics/summary/{level}" : {
      "post" : {
        "tags" : [ "Analytics" ],
        "summary" : "Produces a summary report for a custom report",
        "description" : "Produces an aggregated summary report from a __CustomReport__.  The report is not stored.  At level 1, the drill-through requires that you choose values from the report's group-by and specify them as level 1 optional parameters.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "level",
          "in" : "path",
          "description" : "The report level (0 or 1 for drill-through).",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The report for which to generate a summary.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomReport"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics/timeline/{id}/{level}/{seriesName}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Produces a timeline report for a stored custom report",
        "description" : "Produces an timeline report from a stored [CustomReport](CustomReport.html).  The __seriesName__ is a series name specified from the report.  At level 1, the drill-through requires that you choose values from the report's group-by and specify them as level 1 optional parameters.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The stored report ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "level",
          "in" : "path",
          "description" : "The report level (0 or 1 for drill-through).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "seriesName",
          "in" : "path",
          "description" : "The name of the metric for which to return a series (e.g. \"numMessages\").",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "The starting date/time for the report.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "The end date/time for the report.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "GROUPNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "INSTANCENAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "CLIENTNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "SERVICENAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "HOSTNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "PROTOCOLNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MetricTimeline"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics/timeline/{level}/{seriesName}" : {
      "post" : {
        "tags" : [ "Analytics" ],
        "summary" : "Produces a timeline report for a custom report",
        "description" : "Produces an aggregated summary report from a [CustomReport](CustomReport.html).  The report is not stored.  The __seriesName__ is a series name specified from the report.  At level 1, the drill-through requires that you choose values from the report's group-by and specify them as level 1 optional parameters.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "level",
          "in" : "path",
          "description" : "The report level (0 or 1 for drill-through).",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "seriesName",
          "in" : "path",
          "description" : "The name of the metric for which to return a series (e.g. \"numMessages\").",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The report for which to generate a timeline.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomReport"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/MetricTimeline"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/audit/query" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of all saved audit query.",
        "description" : "Gets a list of all saved [Query](Query.html).",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Query"
              }
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Analytics" ],
        "summary" : "Saves a query for recalling later.",
        "description" : "Saves a query for recalling later.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The query to create.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Query"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Query"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/audit/query/{queryid}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a saved audit query by ID.",
        "description" : "Gets a saved audit [Query](Query.html) by ID.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "queryid",
          "in" : "path",
          "description" : "The query ID.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Query"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Analytics" ],
        "summary" : "Updates a saved audit query by ID.",
        "description" : "Updates a saved audit [Query](Query.html) by ID.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The query to update.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Query"
          }
        }, {
          "name" : "queryid",
          "in" : "path",
          "description" : "The query ID.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Query"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Analytics" ],
        "summary" : "Deletes a saved audit query by ID.",
        "description" : "Deletes a saved audit [Query](Query.html) by ID.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "queryid",
          "in" : "path",
          "description" : "The query ID to delete.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/alerts" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of system alerts",
        "description" : "Gets a list of system alerts.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "description" : "The amount of time in some range of months, days, weeks, hours, minutes.  E.g. 24h",
          "required" : true,
          "type" : "string",
          "default" : "24h"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/generate/{jobid}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Polls the status of a report generation job.",
        "description" : "The job identifier is returned from the [generate report](#ReportsResourcegenerateReport) method.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "jobid",
          "in" : "path",
          "description" : "The job identifier",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/download/pdf/{jobid}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Downloads a PDF from the result of a completed report generation job.",
        "description" : "The job identifier is returned from the [generate report](#ReportsResourcegenerateReport) method.  The job must be complete.  Ensure the job is complete by first (checking the job status)[#ReportsResourcegetGenerateReportStatus].",
        "produces" : [ "application/pdf" ],
        "parameters" : [ {
          "name" : "jobid",
          "in" : "path",
          "description" : "The job identifier",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/download/csv/{jobid}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Downloads a CSV from the result of a completed report generation job.",
        "description" : "The job identifier is returned from the [generate report](#ReportsResourcegenerateReport) method.  The job must be complete.  Ensure the job is complete by first (checking the job status)[#ReportsResourcegetGenerateReportStatus].",
        "produces" : [ "text/csv" ],
        "parameters" : [ {
          "name" : "jobid",
          "in" : "path",
          "description" : "The job identifier",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/schedule/{reportid}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a scheduled report by ID.",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "reportid",
          "in" : "path",
          "description" : "The report identifier.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Report"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Analytics" ],
        "summary" : "Updates a scheduled report by ID.",
        "description" : "",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "reportid",
          "in" : "path",
          "description" : "The report identifier.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The report.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Report"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Report"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Analytics" ],
        "summary" : "Deletes a scheduled report by ID.",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "reportid",
          "in" : "path",
          "description" : "The report identifier.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/custom" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of reports.",
        "description" : "The list of custom reports includes the system default reports.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CustomReport"
              }
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Analytics" ],
        "summary" : "Create a report.",
        "description" : "A report is available in Analytics as one of the main tabs.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The report to create.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CustomReport"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CustomReport"
            }
          },
          "409" : {
            "description" : "A report with that ID already exists"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics/processes" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of processes available to query.",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "value",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics/processgroups" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of process groups available to query.",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "value",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics/groups/{typeName}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of process groups.",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "typeName",
          "in" : "path",
          "description" : "The metric group type name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "value",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/generate" : {
      "post" : {
        "tags" : [ "Analytics" ],
        "summary" : "Creates a job to manually generate a report.",
        "description" : "Report generation begins immediately, ignoring the schedule settings.  The response contains an job \"id\" identifier.  The identifier is used to query the status of the job.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The report to generate",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Report"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/schedule" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of all the scheduled reports.",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Report"
              }
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Analytics" ],
        "summary" : "Creates a scheduled report.",
        "description" : "Reports can be scheduled to run periodically.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The report to schedule",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Report"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Report"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/audit/details/{auditId}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets an audit message details.",
        "description" : "Gets an audit message details.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "auditId",
          "in" : "path",
          "description" : "The audit log ID",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MessageDetails"
            }
          },
          "204" : {
            "description" : "No Content",
            "schema" : {
              "$ref" : "#/definitions/MessageDetails"
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/audit/values/{fieldname}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of values for a field.",
        "description" : "Gets a list of values for a field.  The list can be filtered with values matching __startsWith__.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fieldname",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startswith",
          "in" : "query",
          "description" : "An optional parameter to return values starting with the supplied string.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/alerts/{messageId}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets alerts for a message by ID.",
        "description" : "Gets alerts for a message by ID.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "The message ID.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics/fields" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of metric field names available for summary and timeline queries.",
        "description" : "Retrieves a set of metric fields for a __metricGroupType__ that may be used when querying or interpreting the summary and timeline reports for that type.  Valid __metricGroupType__ are: SystemOverview, Service, Client, ServiceUsagePerClient, TargetServer.  The __metricType__ is the metric name.  The __aggreggateName__ is the metric name for the aggregated __metricType__.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "metricGroupType",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MetricField"
              }
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/metrics/summary/{id}/{level}" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Produces a summary report",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The custom report identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "level",
          "in" : "path",
          "description" : "The report level (0 or 1 for drill-through)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "The starting date/time for the report.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "The end date/time for the report.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "GROUPNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "INSTANCENAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "CLIENTNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "SERVICENAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "HOSTNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "PROTOCOLNAME",
          "in" : "query",
          "description" : "Specified at level 1, the group-by field for drill-down.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/audit/fields" : {
      "get" : {
        "tags" : [ "Analytics" ],
        "summary" : "Gets a list of auditable fields.",
        "description" : "Gets a list of auditable fields.  There are two types, one for summary where there is one aggregated record per message, and detailed, where there can be multiple records per message.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "summary",
          "in" : "query",
          "description" : "Indicates that the fields should be for the summary (true), or detailed report (false).  Defaults to true.",
          "required" : true,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AuditField"
              }
            }
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/reports/audit" : {
      "post" : {
        "tags" : [ "Analytics" ],
        "summary" : "Search audit entries.",
        "description" : "",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The query to perform.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Query"
          }
        }, {
          "name" : "Range",
          "in" : "header",
          "description" : "Return results within range.  E.g.: items=[offset]-[limit].",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Sort",
          "in" : "header",
          "description" : "The field to sort and direction (+ ascending, - descending).  E.g.: name+",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Refresh",
          "in" : "header",
          "description" : "Force a refresh of any cached data.",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Analytics is disabled.  See logs for more information."
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/topology/hosts/id" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get a host id.",
        "description" : "Get a host id.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hostName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/topology" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serviceType",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "gateway", "nodemanager" ]
          },
          "collectionFormat" : "multi"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseTopology"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "",
        "description" : "",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Topology"
          }
        }, {
          "name" : "detectConflict",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "commit",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "propagateTopology",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/hosts" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get all hosts",
        "description" : "Get all hosts in the topology",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseCollectionHost"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Add a host.",
        "description" : "Add a host to the topology",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Host"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "Update the name of a host.",
        "description" : "Update the name of a host.The id cannot be updated.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Host"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/hosts/{hostID}" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get the host specified by hostID from the topology.",
        "description" : "Get a host with id of hostID from the topology.If the hostID is set to localhost then the host that running the Node Manager that this API is running on is returned.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hostID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseHost"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Topology API" ],
        "summary" : "Delete the host specified by hostID from the topology",
        "description" : "Delete a host from the topology.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hostID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/passphrasepolicy" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Returns the current passphrase policy for node managers or groups.",
        "description" : "Returns the current passphrase policy for node managers or groups.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PasswordPolicy"
              }
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      },
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "Save passphrase policy for node managers or groups on disk",
        "description" : "Save passphrase policy for node managers or groups on disk",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "PassphrasePolicy",
          "description" : "The Passphrase Policy parameters to store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PasswordPolicy"
          }
        }, {
          "name" : "propagateStore",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Assertions"
            }
          },
          "400" : {
            "description" : "Bad Request"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/topology/groups/id" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get a group id.",
        "description" : "Get a group id.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/topology/diskinstance/instance/csr" : {
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "hostID",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "subjAltName",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "signAlg",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "sha1"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCSRRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/topology/diskinstance/instance" : {
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "certificate",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "servicePort",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "domainID",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupID",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "initFirstGatewayWithYaml",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "create",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InstanceInfo"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Topology API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "serviceID",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupID",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "groupName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deleteGroupArchives",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/groups" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get all groups in the Topology.",
        "description" : "Get all groups in the topology The group of Node Managers is also returned.",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseCollectionGroup"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Adds an empty group to the Topology.",
        "description" : "This method adds an empty group to the topology.No group-related files are written to the disk of any host in the domain until a new API Server instance is added to the group",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "Update a group's tags or name.",
        "description" : "This method may be used to update a group's tags, or name only.If a new set of services is passed they will be ignored and the original services kept. A group's set of services is updated via POST /api/topology/services/{groupID} and DELETE /api/topology/groups/{groupID}.The id cannot be updated.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/groups/{groupID}/lock/{userID}" : {
      "delete" : {
        "tags" : [ "Topology API" ],
        "summary" : "Unlock a Group for exclusive access.",
        "description" : "Unlock a Group for exclusive access by a user. Only the original locker can unlock the Group, or another user with sufficient privileges to force an unlock of the Group, usually a user with an Administrator role in their user privileges.The userID specified should match the original locker ID and also must be the requesting user's authentication identity. This means that a user cannot request an unlocking for another user.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/id" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get the next topology id of a certain type",
        "description" : "Get the next host, group, gateway, or node manager id in the topology and return it. This results in a topology update.This is used before the CSR (Certificate Sign Request) is generated in managedomain, when Node Managers are being added to a domain.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "enum" : [ "Host", "Group", "Gateway", "NodeManager" ]
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/topology/services/{groupID}" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get all services in a group",
        "description" : "Get all services in the group specified by groupID.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseCollectionService"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Adds a service (e.g. API Server instance) to the Topology",
        "description" : "This method adds a service to the Topology. A service is an API Server instance, or Node Manager.When a new API Server instance is added, new files will be created on disk for the new instance.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "servicesPort",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 8080,
          "format" : "int32"
        }, {
          "name" : "signAlg",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "sha1"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateServiceRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "Update a service name, tags, management port, etc",
        "description" : "This method may be used to update a service's name, tags, management port, or scheme.A service is an API Server instance, or Node Manager.The id or type cannot be updated.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Service"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/services/{groupID}/{serviceID}" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get the service specified by serviceID from the group specified by groupID.",
        "description" : "Get a service with an id of serviceID in group with id of groupID from the topology.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseService"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Topology API" ],
        "summary" : "Delete a service from the topology.",
        "description" : "Delete a service from the topology.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deleteDiskInstance",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "propagateTopology",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/services/id/{groupID}" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get a service id.",
        "description" : "Get a service id.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceName",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseString"
            }
          }
        }
      }
    },
    "/topology/services/status/{groupID}/{serviceID}" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get the status of the specified service.",
        "description" : "Get the status of the specified service.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/merge" : {
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Merges a snippet of a Topology into the main Domain Topology",
        "description" : "Used to merge a snippet of a Topology or a Host specific topology into the Domain Topology. The main use is to re-add a Host which may have temporarily removed from the Topology (either due to Host or Network failure). Note that it is assumed that Topology snippet being merged refereces Hosts, Groups and Instances which have allready been configured and established previously. No disk changes are made when loading this change.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/Topology"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Topology"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          },
          "409" : {
            "description" : "Conflict"
          }
        }
      }
    },
    "/topology/domainStatus" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Returns the Status of All NodeManagers in the domain.",
        "description" : "Returns the state of the Node Managers in the domain, giving their installed topology version and admin user store version (if applicable). Shows overall status of the domain, i.e. if all Node Managers can be contacted and are up to date.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "refresh",
          "in" : "query",
          "description" : "Set the refresh parameter to true will contact each NM for update. Otherwise the latest DomainStatus is returned. Default is true.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DomainStatus"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/topology/fips" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Returns the FIPS mode status for the instance",
        "description" : "Returns the status of the FIPS mode for the Domain, the setting for the Instance, and the current running mode",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/topology/emt/registergateway" : {
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Register E-Gateway in the topology.",
        "description" : "Add E-Gateway to topology if it does not exist. A host and group are created as required. If already exists then this is an indication that the E-Gateway is still running.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GatewayDetails"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/emt/deregistergateway" : {
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Delete a service from the topology.",
        "description" : "Delete a service from the topology. Host and Group are deleted if now empty",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GatewayDetails"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/diskinstance/group/{groupID}" : {
      "put" : {
        "tags" : [ "Topology API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "create",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Topology API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceName",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/services/sign" : {
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Create a signed certificate for SSL communications",
        "description" : "Create a signed certificate for SSL communications",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "csr",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "signAlg",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "sha1"
        }, {
          "name" : "tryRemoteANMs",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SignCSRRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseStringArray"
            }
          }
        }
      }
    },
    "/topology/services/{groupID}/csr" : {
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Create a private key and CSR for SSL communications for an API Gateway",
        "description" : "Generate a private key and CSR (Certificate Sign Request) for an instance.The CSR may be taken offline so that an external CA can create the signed certificate, or the CSR may be sent back to the Admin Node Manager where the domain private key resides in order to create the signed certificate.This method is called by a client application (e.g. managedomain), on an Admin Node Manager when a new instance is being created.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "servicesPort",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 8080,
          "format" : "int32"
        }, {
          "name" : "signAlg",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "sha1"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateCSRRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseStringArray"
            }
          }
        }
      }
    },
    "/topology/groups/{groupID}" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get the group specified by groupID",
        "description" : "Get the group specified by groupID from the topology.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiResponseGroup"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Topology API" ],
        "summary" : "Delete the group specified by groupID",
        "description" : "Delete the group specified by groupID from the topology.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deleteDiskGroup",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/version" : {
      "get" : {
        "tags" : [ "Topology API" ],
        "summary" : "Get the Topology version.",
        "description" : "Returns the the topology version (version and timestamp) as the result on a successful operation",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TopologyVersion"
            }
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        }
      }
    },
    "/topology/groups/{groupID}/lock" : {
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Lock a Group for exclusive access.",
        "description" : "Lock a Group for exclusive access by a user. Once locked, only the locking user can deploy configuration to the Group or Server instances under the Group. Equally, only the locking user can modify the Group. Only the original locker can unlock the Group, or another user with sufficient privileges to force an unlock of the Group, usually a user with an Administrator role in their user privileges.The lock which gets generated has the username and timestamp of when it was created and is a sub-object of the Group.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Topology API" ],
        "summary" : "Force the unlocking of a Group irrespective of the original locker.",
        "description" : "Force the unlocking of a Group for exclusive access, irrespective of the original locker. Typically only users with administrative access can call this, as defined in the RBAC configuration.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/topology/services/{groupID}/withcert" : {
      "post" : {
        "tags" : [ "Topology API" ],
        "summary" : "Adds a service (e.g. API Server instance) to the Topology",
        "description" : "This method adds a service to the Topology. A service is an API Server instance, or Node Manager. When a new API Server instance is added, new files will be created on disk for the new instance.The certificates for the new instance or Node Manager are passed to this method. The certificate has been signed either by 1) an Admin Node Manager with the domain private key, or, 2) managedomain using a user-provided domain private key, or 3) an external CA that was sent the CSR (Certificate Sign Request) generated in a previous API call.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "servicesPort",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 8080,
          "format" : "int32"
        }, {
          "name" : "certificate",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateServiceWithCertRequestBody"
          }
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/kps/{storeAlias}" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "Filters Store objects",
        "description" : "This method returns objects in the specified table that match a specified filter. If any property in any object in the table contains the value of this filter then the object is included in the result set. List and Map object properties are converted to Strings before being compared. A case insensitive comparision is used.\n By default the method returns 100 records. Up to 1000 records can be retrieved using the HTTP header Range, 1000 being the max value for upper bound. The header specifies position of start and end object, inclusive, in the format: \"Range: items=start-end\". E.g.: \"Range: \"items=10-500\".",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "description" : "Alias of store to get objects from.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "A query parameter named filter. If not specified then no filter is applied and all objects are returned. Format: \"/kps/{storeAlias}?filter={filter}\". E.g.: \"/kps/employees?filter=joe.\"",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Success. The response body contains the required objects. NOTE: an empty array indicates that no objects were found. A Content-Range header specifies the start position, end position, and total number of objects found (max upper bound: 1000). Format: \"Content-Range: items startIndex-endIndex/totalObjects\", e.g., \"items 0-99/1000/\"."
          },
          "404" : {
            "description" : "Fail. KPS has not been configured on this node or the specified store does not exist"
          },
          "500" : {
            "description" : "Fail. An internal server error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "KPS API" ],
        "summary" : "Creates an object with server side generated id.",
        "description" : "Creates an object where the the object id (primary key) is auto-generated on the server side.For client generated object id please use the PUT method.If a secondary key is defined for the store, values must be provided for all of its constituent properties.Other property values are optional.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/kps/{storeAlias}/{objectId}" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "Gets a Store object.",
        "description" : "Gets the specified object from the specified store.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "objectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "KPS API" ],
        "summary" : "Creates an object with a client side generated id OR Updates an object.",
        "description" : "Creates or updates an object.The primary ID is specified in the request.If the server generates the primary ID then the POST method should be used.For object creation, both the primary ID and the secondary ID (if defined) must be specified.For object update, the primary ID must be specified.Other properties are optional.To update a property specify its new value.To delete a property set the value to null.It is not currently possible to partially update a Map or a List property.All properties of the Map or List must be specified for this case.",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "objectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "KPS API" ],
        "summary" : "Deletes an object",
        "description" : "Deletes an object with a client side generated id",
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "objectId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/kps/ext/query/{storeAlias}" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "Composite key query.",
        "description" : "Composite key query. Retrieves a unique row from the specified KPS table given a query of the form: columnA=x&columnB=y& ...",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".*"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/kps" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "",
        "description" : "",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/model"
            }
          }
        }
      }
    },
    "/router/service/{instance}/api/kps/cursor/open/{batchSize}/{storeAlias}" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "Gets the first {batchSize} objects in a store.",
        "description" : "Gets the first {batchSize} objects in a store.This method can be used to iterate over rows in a KPS table. Filters can be applied to restrict the rows that are returned. Cursors are automatically closed after 10 minutes of inactivity in order to free resources on the server.\n\nExample: Suppose a cursor is opened with the following URL:\nhttps://localhost:8090/api/router/service/api-server-instance-id/api/kps/cursor/open/100/cities?name=yo&country=USA&country=france\n\\nThis retrieves rows from the 'cities' KPS table, where cities are filtered by name and country. The following points are worth noting:\n\\n* propName is case sensitive, so 'country' and 'Country' refer to different properties.\n* filterValue is case insensitive, so 'USA' and 'usa' are equivalent.\n* A match occurs if a property value *contains* the filterValue. So filter 'name=yo' will match rows where city name is New York, Lyon, etc.\n* A row is only returned if *ALL* property filters match. So if filter is 'name=yo&country=USA', a row will only be returned if both conditions are true.\n* If more than one filterValue is specified for a property, a row is returned if *ANY* of them match. So if filter is 'country=USA&country=france', a row will \nbe returned if the country is either USA or France.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "batchSize",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".*"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/kps/cursor/next/{cursorId}" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "Gets the next {batchSize} objects in a store.",
        "description" : "This method can be used to iterate over rows in a KPS table. Filters can be applied to restrict the rows that are returned.Cursors are automatically closed after 10 minutes of inactivity in order to free resources on the server.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cursorId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/kps/iterator/start/{storeAlias}/{batchSize}" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "Iterates through objects. Start iteration.",
        "description" : "THESE REST METHODS HAVE BEEN DEPRECATED. To iterate over the rows in a KPS table, use the cursor method instead./api/kps/iterator/start - Gets the first {batchSize} objects in a store./api/kps/iterator/next - Gets the next {batchSize} objects in a store.Note: These methods support one client per API Gateway at a time. Concurrent clients are not supported.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "batchSize",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "deprecated" : true,
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/router/service/{instance}/api/kps/iterator/next/{storeAlias}/{batchSize}" : {
      "get" : {
        "tags" : [ "KPS API" ],
        "summary" : "Iterates through objects. Next iteration",
        "description" : "THESE REST METHODS HAVE BEEN DEPRECATED. To iterate over the rows in a KPS table, use the cursor method instead./api/kps/iterator/start - Gets the first {batchSize} objects in a store./api/kps/iterator/next - Gets the next {batchSize} objects in a store.Note: These methods support one client per API Gateway at a time. Concurrent clients are not supported.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "storeAlias",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "batchSize",
          "in" : "path",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "instance",
          "in" : "path",
          "description" : "The unique ID for an API Server instance in the domain.",
          "required" : true,
          "type" : "string"
        } ],
        "security" : [ {
          "basic" : [ ]
        } ],
        "deprecated" : true,
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "basic" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "DestinationInfo" : {
      "type" : "object",
      "properties" : {
        "destinationName" : {
          "type" : "string",
          "description" : "Destination name"
        },
        "destinationType" : {
          "type" : "string",
          "description" : "Destination type: Queue, Topic, TempQueue, TempTopic"
        },
        "messageCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of message available"
        },
        "enqueuesCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of enqueue operations"
        },
        "dequeuesCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of dequeue operations"
        },
        "consumersCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of active consumers"
        },
        "producersCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of active producers"
        },
        "messagesCachedCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of cached messages"
        },
        "dispatchedCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of dispatch operation"
        },
        "inflightCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of messages being processed"
        },
        "expiredCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of expired messages"
        }
      },
      "description" : "Embedded ActiveMQ destination"
    },
    "ConsumerInfo" : {
      "type" : "object",
      "properties" : {
        "destinationType" : {
          "type" : "string",
          "description" : "Destination type: Queue, Topic, TempQueue, TempTopic"
        },
        "destinationName" : {
          "type" : "string",
          "description" : "Destination name"
        },
        "clientId" : {
          "type" : "string",
          "description" : "Client ID"
        },
        "connectionId" : {
          "type" : "string",
          "description" : "Connection ID"
        },
        "sessionId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Session ID"
        },
        "enqueues" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of enqueue operations"
        },
        "dequeues" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of dequeue operations"
        },
        "dispatched" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Number of dispatched operation"
        },
        "dispatchedQueueSize" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Size of dispatch queue"
        },
        "prefetch" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Prefetch size of subscription"
        },
        "maxPending" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Maximum number of pending messages"
        },
        "exclusive" : {
          "type" : "boolean",
          "description" : "Indicates that consumer is exclusive on destination"
        },
        "retroactive" : {
          "type" : "boolean",
          "description" : "Indicates that consumer is can receive previously stored messages (topics only)"
        },
        "selector" : {
          "type" : "string"
        }
      },
      "description" : "Embedded ActiveMQ consumer"
    },
    "MessageInfo" : {
      "type" : "object",
      "properties" : {
        "messageId" : {
          "type" : "string",
          "description" : "Message ID"
        },
        "messageType" : {
          "type" : "string",
          "description" : "Message type: text, binary"
        },
        "messageSize" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Message size"
        },
        "messageTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Message creation timestamp"
        }
      },
      "description" : "Embedded ActiveMQ message summary"
    },
    "BrokerMessage" : {
      "type" : "object",
      "properties" : {
        "messageType" : {
          "type" : "string",
          "description" : "Message type: TEXT, BINARY",
          "enum" : [ "TEXT", "BINARY" ]
        },
        "messageSize" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Message size"
        },
        "messageData" : {
          "type" : "object",
          "description" : "Message content"
        },
        "jmsreplyTo" : {
          "type" : "string"
        },
        "jmscorrelationID" : {
          "type" : "string"
        },
        "jmspriority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "jmsproperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "jmsdeliveryMode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "jmsexpiration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "jmsmessageID" : {
          "type" : "string"
        },
        "jmsredelivered" : {
          "type" : "boolean"
        },
        "jmstimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "jmstype" : {
          "type" : "string"
        }
      },
      "description" : "Embedded ActiveMQ message"
    },
    "SubscriberInfo" : {
      "type" : "object",
      "properties" : {
        "clientId" : {
          "type" : "string",
          "description" : "Subscription client ID value"
        },
        "subscriberName" : {
          "type" : "string",
          "description" : "Subscription name value"
        },
        "destination" : {
          "type" : "string",
          "description" : "Subscription destination name"
        },
        "selector" : {
          "type" : "string",
          "description" : "Subscription message selector value"
        },
        "active" : {
          "type" : "boolean",
          "description" : "Indicates if subscription is active"
        }
      },
      "description" : "Embedded ActiveMQ subscription"
    },
    "ConnectionInfo" : {
      "type" : "object",
      "properties" : {
        "connectionId" : {
          "type" : "string",
          "description" : "Connection ID"
        },
        "remoteAddress" : {
          "type" : "string",
          "description" : "Remote address"
        },
        "active" : {
          "type" : "boolean",
          "description" : "Indicates that connection is active"
        },
        "connected" : {
          "type" : "boolean",
          "description" : "Indicates that connection is established"
        },
        "blocked" : {
          "type" : "boolean",
          "description" : "Indicates that connection is blocked"
        },
        "slow" : {
          "type" : "boolean",
          "description" : "Indicats that connection is slow"
        },
        "dispatchQueueSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "consumers" : {
          "type" : "array",
          "description" : "List of consumers created on the connection",
          "items" : {
            "$ref" : "#/definitions/ConsumerInfo"
          }
        }
      },
      "description" : "Embedded ActiveMQ connection"
    },
    "StatusInfo" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Indicates that the Embedded ActiveMQ broker is enabled"
        },
        "memoryUsage" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current ActiveMQ memory store consumption (in Bytes)"
        },
        "memoryLimit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ActiveMQ memory store limit (in Bytes)"
        },
        "storeUsage" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current ActiveMQ message store consumption (in Bytes)"
        },
        "storeLimit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ActiveMQ message store limit (in Bytes)"
        },
        "tempUsage" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current ActiveMQ temp storage consumption (in Bytes)"
        },
        "tempLimit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "ActiveMQ message temp storage limit (in Bytes)"
        }
      },
      "description" : "Embedded ActiveMQ status"
    },
    "StatisticsContainer" : {
      "type" : "object",
      "properties" : {
        "statistics" : {
          "type" : "object",
          "description" : "Map of all available broker statistics",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Embedded ActiveMQ global statistics"
    },
    "Assertion" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "A boolean determining if the assertion is enabled or not"
        }
      },
      "description" : "A password policy assertion"
    },
    "Assertions" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string",
          "example" : "password composition",
          "description" : "A description of the assertions list"
        },
        "matchCount" : {
          "type" : "string",
          "example" : "*",
          "description" : "The count of assertions which must pass, * for all"
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates if the assertion is to be applied or not"
        },
        "assertion" : {
          "type" : "array",
          "description" : "The password assertions",
          "items" : {
            "$ref" : "#/definitions/Assertion"
          }
        }
      },
      "description" : "A password policy assertions group"
    },
    "PasswordPolicy" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates if the password policy is enabled or not"
        },
        "assertions" : {
          "type" : "array",
          "description" : "The password assertions lists",
          "items" : {
            "$ref" : "#/definitions/Assertions"
          }
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Version of the password policy, incremented each time a policy is modified"
        },
        "dataVersion" : {
          "type" : "string",
          "example" : "7.4.1",
          "description" : "Data model version"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Timestamp"
        }
      },
      "description" : "The password policy"
    },
    "AdvisoryBanner" : {
      "type" : "object",
      "properties" : {
        "bannerEnabled" : {
          "type" : "boolean"
        },
        "bannerText" : {
          "type" : "string"
        }
      }
    },
    "AdminUser" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "user-5",
          "description" : "A unique id for the admin user of the form"
        },
        "name" : {
          "type" : "string",
          "example" : "admin",
          "description" : "The name of the user"
        },
        "roles" : {
          "type" : "array",
          "description" : "The set of RBAC roles that the user has",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "An admin user"
    },
    "AdminUserRequest" : {
      "type" : "object",
      "properties" : {
        "adminUser" : {
          "example" : "admin",
          "description" : "The name of the user",
          "$ref" : "#/definitions/AdminUser"
        },
        "password" : {
          "type" : "string",
          "example" : "changeit",
          "description" : "The password of the user"
        }
      },
      "description" : "Request to create or update an admin user"
    },
    "ApiError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "AdminUserRole" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "role-5",
          "description" : "The admin user role id. This is of the form role-n"
        },
        "name" : {
          "type" : "string",
          "example" : "API Server Administrator",
          "description" : "The admin user role name"
        },
        "displayName" : {
          "type" : "string",
          "example" : "API Gateway Administrator",
          "description" : "The display name of the role"
        }
      },
      "description" : "Admin user role"
    },
    "AdminUserCredentials" : {
      "type" : "object",
      "properties" : {
        "passwordHistory" : {
          "type" : "array",
          "description" : "History of hashed passwords.",
          "items" : {
            "type" : "string",
            "xml" : {
              "name" : "passwordHistory"
            }
          }
        },
        "passwordTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "xml" : {
            "attribute" : true
          },
          "description" : "Timestamp of last password modification"
        }
      },
      "xml" : {
        "name" : "AdminUserCredentials"
      },
      "description" : "An admin user's credentials."
    },
    "AdminUserStore" : {
      "type" : "object",
      "properties" : {
        "productVersion" : {
          "type" : "string",
          "example" : "7.2.0",
          "description" : "The product version"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Version of the user store,  incremented each time is updated"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Timestamp"
        },
        "adminUsers" : {
          "type" : "array",
          "description" : "The set of admin users",
          "items" : {
            "$ref" : "#/definitions/AdminUser"
          }
        },
        "adminUserCredentials" : {
          "type" : "object",
          "description" : "The credentials of the admin users",
          "additionalProperties" : {
            "$ref" : "#/definitions/AdminUserCredentials"
          }
        },
        "adminUserRoles" : {
          "type" : "array",
          "description" : "The set of RBAC roles that the user has",
          "items" : {
            "$ref" : "#/definitions/AdminUserRole"
          }
        },
        "uniqueIdCounters" : {
          "type" : "object",
          "description" : "Uniques counters of roles and users",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "adminUsersVersion" : {
          "$ref" : "#/definitions/AdminUsersVersion"
        }
      },
      "description" : "The admin user store"
    },
    "AdminUsersVersion" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "Version of the user store,  incremented each time is updated"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Timestamp"
        }
      },
      "description" : "The version of the admin user"
    },
    "PasswordStatus" : {
      "type" : "object",
      "properties" : {
        "failed" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "passed" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PasswordValidationRequest" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string",
          "example" : "admin",
          "description" : "The username whose password is being tested, only required if testing to see if new password contains account / user name"
        },
        "oldPassword" : {
          "type" : "string",
          "example" : "foobar",
          "description" : "The old password, only required if testing to see if new password contains parts of old password"
        },
        "newPassword" : {
          "type" : "string",
          "example" : "foobar123",
          "description" : "The new password which is tested for it's strength"
        }
      },
      "description" : "Password validation request"
    },
    "ApiResponseString" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "string"
        }
      }
    },
    "DeploymentArchive" : {
      "type" : "object",
      "properties" : {
        "rootProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "policyProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "environmentProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "byte"
          }
        }
      }
    },
    "ApiResponseDeploymentResult" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/DeploymentResult"
        }
      }
    },
    "DeploymentResult" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "boolean"
        },
        "errorCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "failureReason" : {
          "type" : "string"
        },
        "traceData" : {
          "$ref" : "#/definitions/TraceData"
        },
        "archiveId" : {
          "type" : "string"
        }
      }
    },
    "TraceData" : {
      "type" : "object",
      "properties" : {
        "traceRecords" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TraceRecord"
          }
        }
      }
    },
    "TraceRecord" : {
      "type" : "object",
      "properties" : {
        "dateTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "level" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "ApiResponseArchive" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/Archive"
        }
      }
    },
    "Archive" : {
      "type" : "object",
      "properties" : {
        "rootProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "format" : "byte"
          }
        }
      }
    },
    "UpdatePassphraseRequestBody" : {
      "type" : "object",
      "properties" : {
        "oldPassphrase" : {
          "type" : "string"
        },
        "newPassphrase" : {
          "type" : "string"
        }
      }
    },
    "ApiResponseMapStringMapStringServiceDeploymentArchiveDetails" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/definitions/ServiceDeploymentArchiveDetails"
            }
          }
        }
      }
    },
    "ServiceDeploymentArchiveDetails" : {
      "type" : "object",
      "properties" : {
        "rootProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "policyProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "environmentProperties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "user" : {
          "type" : "string"
        },
        "deploymentTimestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "Loaded", "Pending" ]
        }
      }
    },
    "ApiResponseMapStringMapStringListServiceDeploymentArchiveDetails" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ServiceDeploymentArchiveDetails"
              }
            }
          }
        }
      }
    },
    "ApiResponseMapStringListServiceDeploymentArchiveDetails" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ServiceDeploymentArchiveDetails"
            }
          }
        }
      }
    },
    "ApiResponseEnvironmentalizedEntities" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/EnvironmentalizedEntities"
        }
      }
    },
    "EnvironmentalizedEntities" : {
      "type" : "object",
      "properties" : {
        "environmentalizedEntities" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentalizedEntity"
          }
        }
      }
    },
    "EnvironmentalizedEntity" : {
      "type" : "object",
      "properties" : {
        "entityPk" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "keyDescription" : {
          "type" : "string"
        },
        "environmentalizedFields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EnvironmentalizedEntityField"
          }
        }
      }
    },
    "EnvironmentalizedEntityField" : {
      "type" : "object",
      "properties" : {
        "entityFieldName" : {
          "type" : "string"
        },
        "index" : {
          "type" : "integer",
          "format" : "int32"
        },
        "value" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "AdminSystemCredentials" : {
      "type" : "object",
      "properties" : {
        "passwordHistory" : {
          "type" : "array",
          "description" : "History of hashed passwords.",
          "items" : {
            "type" : "string",
            "xml" : {
              "name" : "passwordHistory"
            }
          }
        },
        "passwordTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "xml" : {
            "attribute" : true
          },
          "description" : "Timestamp of last password modification"
        }
      },
      "xml" : {
        "name" : "AdminSystemCredentials"
      },
      "description" : "A system's credentials."
    },
    "GroupSettings" : {
      "type" : "object",
      "properties" : {
        "productVersion" : {
          "type" : "string",
          "example" : "7.2.0",
          "description" : "The product version"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Version of the group settings store"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The timestamp at which the group settings were last updated"
        },
        "passphraseHistory" : {
          "type" : "object",
          "description" : "The passphrase histories of both group/s and nodemanager/s",
          "additionalProperties" : {
            "$ref" : "#/definitions/AdminSystemCredentials"
          }
        },
        "groupSettingsVersion" : {
          "$ref" : "#/definitions/GroupSettingsVersion"
        }
      },
      "description" : "The group settings store"
    },
    "GroupSettingsVersion" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1,
          "description" : "Version of the group settings store,  incremented each time is updated"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "Timestamp"
        }
      },
      "description" : "The version of the group credentials store"
    },
    "API" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "path" : {
          "type" : "string",
          "example" : "/users",
          "description" : "The API path"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the REST API Method. This contains the exposed path."
        },
        "operations" : {
          "type" : "array",
          "description" : "The list of operations that can be performed on *path*",
          "items" : {
            "$ref" : "#/definitions/Operation"
          }
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "description" : "The API is a path and operations."
    },
    "Authorization" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "passAs" : {
          "type" : "string",
          "example" : "header",
          "description" : "Denotes how the API key must be passed. Valid values are 'header' or 'query'."
        },
        "keyname" : {
          "type" : "string",
          "example" : "apiKey",
          "description" : "The name of the header or query parameter to be used when passing the API key."
        },
        "scopes" : {
          "type" : "array",
          "description" : "The list of OAuth scopes.",
          "items" : {
            "$ref" : "#/definitions/Scope"
          }
        },
        "grantTypes" : {
          "description" : "The OAuth grant types.",
          "$ref" : "#/definitions/GrantTypes"
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "description" : "The authorization type.  One of: basicAuth, apiKey, oauth2, none"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "AuthorizationCode" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "tokenRequestEndpoint" : {
          "description" : "The login endpoint definition.",
          "$ref" : "#/definitions/TokenRequestEndpoint"
        },
        "tokenEndpoint" : {
          "description" : "The login endpoint definition.",
          "$ref" : "#/definitions/TokenEndpoint"
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "ClientCredentials" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "url" : {
          "type" : "string",
          "description" : "The URL of the token endpoint for the client credentials grant flow. The value should be in a URL format."
        },
        "tokenName" : {
          "type" : "string",
          "example" : "access_token",
          "description" : "An optional alternative name to standard 'access_token' OAuth2 parameter."
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "Discriminator" : {
      "type" : "object",
      "properties" : {
        "propertyName" : {
          "type" : "string"
        },
        "mapping" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ErrorResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "code" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 404,
          "description" : "The response code"
        },
        "reason" : {
          "type" : "string",
          "example" : "Not Found",
          "description" : "The response reason"
        },
        "schema" : {
          "description" : "The response schema",
          "$ref" : "#/definitions/SchemaObject"
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "description" : "An operation response code."
    },
    "ExternalDocs" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "GrantTypes" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "implicit" : {
          "description" : "The Implicit Grant flow definition.",
          "$ref" : "#/definitions/Implicit"
        },
        "clientCredentials" : {
          "description" : "The Client Credentials Grant flow definition.",
          "$ref" : "#/definitions/ClientCredentials"
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "authorization_code" : {
          "description" : "The Authorization Code Grant flow definition.",
          "$ref" : "#/definitions/AuthorizationCode"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "Implicit" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "loginEndpoint" : {
          "description" : "The login endpoint definition.",
          "$ref" : "#/definitions/LoginEndpoint"
        },
        "tokenName" : {
          "type" : "string",
          "example" : "access_token",
          "description" : "An optional alternative name to standard 'access_token' OAuth2 parameter."
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "LoginEndpoint" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "url" : {
          "type" : "string",
          "example" : "http://myapi.io/oauth/dialog",
          "description" : "The URL of the authorization endpoint for the implicit grant flow. The value should be in a URL format."
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "Number" : {
      "type" : "object"
    },
    "Operation" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "httpMethod" : {
          "type" : "string",
          "example" : "GET",
          "description" : "The HTTP method"
        },
        "nickname" : {
          "type" : "string",
          "example" : "getUserById",
          "description" : "The nickname of the operation"
        },
        "summary" : {
          "type" : "string",
          "example" : "Gets a user by ID",
          "description" : "A short summary description of the operation"
        },
        "notes" : {
          "type" : "string",
          "example" : "If the user does not exist, then a *404 Not Found* error is returned",
          "description" : "A detailed description of the operation"
        },
        "responseClass" : {
          "type" : "string",
          "example" : "User",
          "description" : "The return type of the method, e.g. void, array, or a type found in models"
        },
        "errorResponses" : {
          "type" : "array",
          "description" : "A list of possible response messages and their meanings",
          "items" : {
            "$ref" : "#/definitions/ErrorResponse"
          }
        },
        "consumes" : {
          "type" : "array",
          "example" : [ "application/json" ],
          "description" : "The content types that the operation consumes",
          "items" : {
            "type" : "string"
          }
        },
        "produces" : {
          "type" : "array",
          "example" : [ "application/json" ],
          "description" : "The content types that the operation produces",
          "items" : {
            "type" : "string"
          }
        },
        "authorizations" : {
          "type" : "object",
          "example" : { },
          "description" : "Authorizations",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            }
          }
        },
        "tags" : {
          "type" : "object",
          "example" : {
            "Category" : [ "Social Network", "Photos" ],
            "Type" : [ "REST" ],
            "Department" : [ "Development" ]
          },
          "description" : "The list of tags associated with this API operation. Each tag can have multiple values",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "securityProfile" : {
          "description" : "The security profile associated with the API Method. This profile will override the profile associated with the API",
          "$ref" : "#/definitions/SwaggerSecurityProfile"
        },
        "documentationUrl" : {
          "type" : "string",
          "example" : "http://api.acme.com/docs#method",
          "description" : "The documentation URL for the operation"
        },
        "cors" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates that the API is CORS enabled"
        },
        "parameters" : {
          "type" : "array",
          "description" : "A list of accepted parameters",
          "items" : {
            "$ref" : "#/definitions/ParameterV11ex"
          }
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "User",
          "description" : "The return type of the method, e.g. void, array, or a type found in models"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "description" : "An operation available to an API path."
    },
    "ParameterV11ex" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates that the parameter is required"
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "example" : {
            "$ref" : "User"
          },
          "description" : "If the parameter *type* is \"array\", then the parameter should reference a model schema.",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "name" : {
          "type" : "string",
          "example" : "userId",
          "description" : "The parameter name"
        },
        "dataType" : {
          "type" : "string",
          "example" : "string",
          "description" : "The parameter data type, e.g. boolean, byte, date, double, float, integer, long, string, or a type name found in models"
        },
        "paramType" : {
          "type" : "string",
          "example" : "body",
          "description" : "The parameter type, e.g. query, path, body, header"
        },
        "allowMultiple" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates that the parameter can be included multiple times (e.g. query or form)"
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "description" : "An operation parameter."
    },
    "SchemaObject" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "Scope" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "scope" : {
          "type" : "string",
          "example" : "read",
          "description" : "The OAuth2 scope name."
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "Swagger" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates that the API is deprecated.  If 'true', then the API may have a 'retirementDate'."
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "apiVersion" : {
          "type" : "string",
          "example" : 1.0,
          "description" : "The API version"
        },
        "swaggerVersion" : {
          "type" : "string",
          "example" : 1.1,
          "description" : "The Swagger version"
        },
        "basePath" : {
          "type" : "string",
          "example" : "http://basepath.org",
          "description" : "The base path"
        },
        "resourcePath" : {
          "type" : "string",
          "example" : "/api",
          "description" : "The resource path hosted"
        },
        "models" : {
          "type" : "object",
          "example" : {
            "User" : {
              "type" : "object",
              "required" : [ "id", "name", "email" ],
              "properties" : {
                "id" : {
                  "type" : "string"
                },
                "name" : {
                  "type" : "string"
                },
                "email" : {
                  "type" : "string"
                }
              }
            }
          },
          "description" : "The models/schema for the API",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "consumes" : {
          "type" : "array",
          "example" : [ "application/json" ],
          "description" : "The content types that the API consumes",
          "items" : {
            "type" : "string"
          }
        },
        "produces" : {
          "type" : "array",
          "example" : [ "application/json" ],
          "description" : "The content types that the API produces",
          "items" : {
            "type" : "string"
          }
        },
        "authorizations" : {
          "type" : "object",
          "example" : { },
          "description" : "The Authorization schemes provided for this API",
          "additionalProperties" : {
            "$ref" : "#/definitions/Authorization"
          }
        },
        "name" : {
          "type" : "string",
          "example" : "Flickr",
          "description" : "The name of the API"
        },
        "summary" : {
          "type" : "string",
          "example" : "The Flickr photo-sharing API",
          "description" : "Brief summary of the API."
        },
        "securityProfile" : {
          "description" : "The security profile associated with the API",
          "$ref" : "#/definitions/SwaggerSecurityProfile"
        },
        "basePaths" : {
          "type" : "array",
          "example" : [ "http://localhost:8080", "https://localhost:8081" ],
          "description" : "Array of basePaths supported for this API/service, based on the configured ports",
          "items" : {
            "type" : "string"
          }
        },
        "image" : {
          "type" : "string",
          "description" : "API image URL"
        },
        "state" : {
          "type" : "string",
          "example" : "rest",
          "description" : "The state of the API.  Possible values: 'pending', 'unpublished', or 'published'."
        },
        "cors" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates that the API is CORS enabled"
        },
        "expired" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates that the API is expired."
        },
        "retirementDate" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1420070400000,
          "description" : "Indicates that the API is deprecated and will be retired on the supplied date (in milliseconds)."
        },
        "retired" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates that the API is retired."
        },
        "tags" : {
          "type" : "object",
          "example" : {
            "Category" : [ "Social Network", "Photos" ],
            "Type" : [ "REST" ],
            "Department" : [ "Development" ]
          },
          "description" : "The list of tags associated with this API. Each tag can have multiple values",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "documentationUrl" : {
          "type" : "string",
          "example" : "http://api.acme.com/docs#method",
          "description" : "The documentation URL for the operation"
        },
        "availableApiDefinitions" : {
          "type" : "object",
          "example" : { },
          "description" : "The schema definitions that this API supports and links to those definitions.",
          "additionalProperties" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "availableSDK" : {
          "type" : "object",
          "example" : { },
          "description" : "The SDK downloads that this API supports and links to those downloads.",
          "additionalProperties" : {
            "type" : "string",
            "format" : "uri"
          }
        },
        "apis" : {
          "type" : "array",
          "description" : "The API resources",
          "items" : {
            "$ref" : "#/definitions/API"
          }
        },
        "customProperties" : {
          "type" : "object",
          "example" : {
            "customProperty1" : "value1",
            "customProperty2" : "value2"
          },
          "description" : "Dictionary of name/value pairs containing the custom properties defined for this API",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "createDate" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1364407145321,
          "description" : "Epoch/Unix time stamp when the API was created"
        },
        "accessGrantedDate" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1364407145321,
          "description" : "Epoch/Unix time stamp when the API access was granted"
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "rest",
          "description" : "The resource type. Possible values: 'rest', 'wsdl'"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      },
      "description" : "A Swagger API definition."
    },
    "SwaggerSecurityDevice" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "HTTPBasicSecurityDevice",
          "description" : "Type identifier for the device. Possible Values: HTTPBasicSecurityDevice, OAuthSecurityDevice, AWSRESTRequestSecurityDevice, AWSQueryStringRequestSecurityDevice, APIKeyOnlySecurityDevice, APIKeyAndSecretSecurityDevice, TwoWaySSLSecurityDevice"
        },
        "typeDisplayName" : {
          "type" : "string",
          "example" : "HTTP Basic Authentication",
          "description" : "Textual display name for the device"
        },
        "name" : {
          "type" : "string",
          "example" : "HTTP Basic Device",
          "description" : "Name of the device"
        },
        "order" : {
          "type" : "integer",
          "format" : "int32",
          "example" : "HTTP Basic Device",
          "description" : "Order of preference, zero being highest. Devices will attempt to authenticate the incoming request using this order of preference."
        },
        "scopes" : {
          "type" : "array",
          "example" : "resource.READ",
          "description" : "The list of scopes defined for the security device.",
          "items" : {
            "type" : "string"
          }
        },
        "scopeMatching" : {
          "type" : "string",
          "example" : "Any",
          "description" : "Specifies how scopes will be matched. Possible values: [ Any, All ]"
        }
      },
      "description" : "Security Device details."
    },
    "SwaggerSecurityProfile" : {
      "type" : "object",
      "properties" : {
        "devices" : {
          "type" : "array",
          "example" : [ {
            "type" : "APIKeyOnlySecurityDevice",
            "typeDisplayName" : "API Key only",
            "name" : "API Key Device",
            "order" : 1,
            "keyField" : "KeyId"
          }, {
            "type" : "HTTPBasicSecurityDevice",
            "typeDisplayName" : "HTTP Basic Authentication",
            "name" : "HTTP Basic Device",
            "order" : 0,
            "realm" : "axway"
          } ],
          "description" : "List of Security Devices associated with this profile",
          "items" : {
            "$ref" : "#/definitions/SwaggerSecurityDevice"
          }
        }
      },
      "description" : "Security Profile details."
    },
    "TokenEndpoint" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "url" : {
          "type" : "string",
          "description" : "The URL of the token endpoint for the authentication code grant flow. The value should be in a URL format."
        },
        "tokenName" : {
          "type" : "string",
          "example" : "access_code",
          "description" : "An optional alternative name to standard 'access_code' OAuth2 parameter."
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "TokenRequestEndpoint" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "An identifier",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Schema title"
        },
        "description" : {
          "type" : "string",
          "description" : "Description of the Schema"
        },
        "format" : {
          "type" : "string",
          "description" : "The format ex: int32, int64, float, double, byte, binary, date, date-time or password"
        },
        "required" : {
          "type" : "array",
          "description" : "Specifies if the parameter is required",
          "items" : {
            "type" : "string"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "Not used because our model does not support inline nested types",
          "additionalProperties" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "additionalProperties" : {
          "type" : "object",
          "description" : "Specifies additional schema properties"
        },
        "items" : {
          "description" : "if the schema is an array specifies the items type",
          "$ref" : "#/definitions/SchemaObject"
        },
        "example" : {
          "type" : "object",
          "description" : "Specifies an example of an instance of this schema"
        },
        "xml" : {
          "type" : "object",
          "description" : "Specifies metadata to describe the XML representation format of this schema"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 100,
          "description" : "Indicates the maximum length of a parameter of type 'string'"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Indicates the minimum length of a parameter of type 'string'. If not present, assumed default value is 0."
        },
        "pattern" : {
          "type" : "string",
          "example" : 3,
          "description" : "Specifies a valid regular expression against which a parameter of type 'string' is validated."
        },
        "exclusiveMinimum" : {
          "type" : "boolean",
          "example" : true,
          "description" : "If true, specifies that the value of the number parameter must be greater than the specified minimum value, otherwise the value must be great than, or equal to, the specified minimum value."
        },
        "exclusiveMaximum" : {
          "type" : "boolean",
          "example" : false,
          "description" : "If true, specifies that the value of the number parameter must be less than the specified maximum value, otherwise the value must be less than, or equal to, the specified maximum value."
        },
        "minimum" : {
          "type" : "object",
          "example" : 1,
          "description" : "Specifies the minimum possible value of the number parameter."
        },
        "maximum" : {
          "type" : "object",
          "example" : 100,
          "description" : "Specifies the maximum possible value of the number parameter."
        },
        "multipleOf" : {
          "example" : 10,
          "description" : "Specifies that the value of the number parameter must be divisible by this value. Must be an integer value > 0",
          "$ref" : "#/definitions/Number"
        },
        "maxItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "minItems" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for array parameters. Must be an integer value greater than, or equal to 0"
        },
        "uniqueItems" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Specifies whether or not all array items should be unique."
        },
        "allowEmptyValue" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an empty value is permitted."
        },
        "maxProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3,
          "description" : "Specifies the maximum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "minProperties" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Specifies the minimum number of items permitted for object parameters. Must be an integer value greater than, or equal to 0"
        },
        "not" : {
          "description" : "Specifies that the schema can not be the one defined in this field",
          "$ref" : "#/definitions/SchemaObject"
        },
        "nullable" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not a null value for the defined schema should be allowed"
        },
        "readOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is read only and should not be used as part of the request"
        },
        "writeOnly" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not an object property is write only and should not be used as part of the response"
        },
        "deprecated" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Specifies whether or not the schema is deprecated. It should be transitioned out of usage"
        },
        "externalDocs" : {
          "description" : "Specifies external documentation",
          "$ref" : "#/definitions/ExternalDocs"
        },
        "discriminator" : {
          "description" : "Specifies an object name that is used to differentiate between other schemas. It adds support for polymorphism.",
          "$ref" : "#/definitions/Discriminator"
        },
        "collectionFormat" : {
          "type" : "string"
        },
        "oneOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be one of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "anyOf" : {
          "type" : "array",
          "description" : "Specifies that the schema can be any of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "allOf" : {
          "type" : "array",
          "description" : "Specifies that the schema is a combination of all of those listed",
          "items" : {
            "$ref" : "#/definitions/SchemaObject"
          }
        },
        "url" : {
          "type" : "string",
          "example" : ".",
          "description" : "The URL of the authorization endpoint for the authentication code grant flow. The value should be in a URL format."
        },
        "clientIdName" : {
          "type" : "string",
          "example" : ".",
          "description" : "An optional alternative name to standard \"client_id\" OAuth2 parameter."
        },
        "clientSecretName" : {
          "type" : "string",
          "example" : ".",
          "description" : "An optional alternative name to standard \"client_secret\" OAuth2 parameter."
        },
        "$ref" : {
          "type" : "string",
          "example" : "#/definitions/User",
          "description" : "A Reference to a definition on definitions object"
        },
        "default" : {
          "type" : "object",
          "description" : "Default value for this schema if it is applicable"
        },
        "type" : {
          "type" : "string",
          "example" : "string",
          "description" : "The type ex: array , boolean, integer , null , number, object, string"
        },
        "enum" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "AuditEvents" : {
      "type" : "object",
      "properties" : {
        "categories" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/EventCategory"
          }
        }
      }
    },
    "Event" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "desc" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        }
      }
    },
    "EventCategory" : {
      "type" : "object",
      "properties" : {
        "categoryName" : {
          "type" : "string"
        },
        "events" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      }
    },
    "AuditSettings" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "url" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "trustedPem" : {
          "type" : "string"
        }
      }
    },
    "ApiResponseMapStringObject" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "EventTypeResult" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "source" : {
          "type" : "string"
        },
        "serverity" : {
          "type" : "string"
        },
        "messageId" : {
          "type" : "string"
        }
      }
    },
    "EventTypeResults" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EventTypeResult"
          }
        }
      }
    },
    "ApiResponseErrorMessage" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "string"
        }
      }
    },
    "MetricsTotalResult" : {
      "type" : "object",
      "properties" : {
        "groupType" : {
          "type" : "string"
        },
        "groupId" : {
          "type" : "string"
        },
        "failures" : {
          "type" : "string"
        },
        "exceptions" : {
          "type" : "string"
        },
        "groupName" : {
          "type" : "string"
        },
        "successes" : {
          "type" : "string"
        }
      }
    },
    "MetricsTotalsResults" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricsTotalResult"
          }
        }
      }
    },
    "MetricsTotalsErrors" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ValidationError"
          }
        }
      }
    },
    "ValidationError" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "MetricGroup" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "parentId" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "MetricGroupListResponse" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricGroup"
          }
        }
      }
    },
    "MetricsMetadataResult" : {
      "type" : "object",
      "properties" : {
        "monitoringEnabled" : {
          "type" : "boolean"
        },
        "totalMemoryUsedMB" : {
          "type" : "number",
          "format" : "double"
        },
        "source" : {
          "type" : "integer",
          "format" : "int64"
        },
        "metricGroupTypes" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        }
      }
    },
    "MetricsMetadataResults" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricsMetadataResult"
          }
        }
      }
    },
    "MetricsSummaryResult" : {
      "type" : "object",
      "properties" : {
        "gatewayId" : {
          "type" : "string"
        },
        "gatewayName" : {
          "type" : "string"
        },
        "gatewayGroupName" : {
          "type" : "string"
        },
        "groupType" : {
          "type" : "string"
        },
        "groupName" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "MetricsSummaryResults" : {
      "type" : "object",
      "properties" : {
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MetricsSummaryResult"
          }
        }
      }
    },
    "MetricTimeline" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "example" : "numMessages",
          "description" : "The metric name.",
          "readOnly" : true
        },
        "series" : {
          "type" : "array",
          "description" : "The time series.",
          "items" : {
            "$ref" : "#/definitions/Series"
          }
        }
      },
      "description" : "The metrics timeline report is a report of a specific metric over a period of time."
    },
    "Series" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "numMessages",
          "description" : "The metric type name",
          "readOnly" : true
        },
        "pointInterval" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 300000,
          "description" : "The amount of time, in milliseconds, between data points"
        },
        "pointStart" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1363737600000,
          "description" : "The time of the first data point in milliseconds"
        },
        "data" : {
          "type" : "array",
          "example" : [ 0, 0, 1, 0, 2, 0, 3, 0, 4 ],
          "description" : "The a metric measurement at a specific time interval",
          "items" : {
            "type" : "number",
            "format" : "float"
          }
        }
      },
      "description" : "A metric time series."
    },
    "MetricTimelineResponse" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/MetricTimeline"
        }
      }
    },
    "MetricsTimelineErrors" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ValidationError"
          }
        }
      }
    },
    "Summary" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "groupId" : {
          "type" : "string"
        },
        "groupName" : {
          "type" : "string"
        },
        "hostName" : {
          "type" : "string"
        },
        "summaryMetrics" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "SummaryResponse" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/Summary"
        }
      }
    },
    "ACLPermissions" : {
      "type" : "object",
      "properties" : {
        "roles" : {
          "type" : "object",
          "description" : "Map of available roles and available ACL permissions",
          "additionalProperties" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "A list of roles and ACL permissions available to the role"
    },
    "UserPermissions" : {
      "type" : "object",
      "properties" : {
        "user" : {
          "type" : "string",
          "example" : "admin",
          "description" : "The user's name"
        },
        "permissions" : {
          "type" : "array",
          "example" : "monitoring,traffic_monitor,logs",
          "description" : "Available ACL permissions",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "A list of RBAC permissions available for the user"
    },
    "AuthenticatedUserAttributes" : {
      "type" : "object",
      "properties" : {
        "firstLogin" : {
          "type" : "boolean"
        },
        "isSSOLogin" : {
          "type" : "boolean"
        },
        "userDn" : {
          "type" : "string"
        },
        "lastSeen" : {
          "type" : "integer",
          "format" : "int64"
        },
        "passwordSetOn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "changePassword" : {
          "type" : "boolean"
        },
        "changePasswordMessage" : {
          "type" : "string"
        }
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "2be9fc6e-1110-474f-8029-bf1577ec3801",
          "description" : "The unique identifier for the user"
        },
        "organizationId" : {
          "type" : "string",
          "example" : "6fb4bd38-199a-4e9f-8c11-43233f530d82",
          "description" : "The unique identifier for the organization to which the user belongs"
        },
        "name" : {
          "type" : "string",
          "example" : "New User",
          "description" : "The user's name"
        },
        "description" : {
          "type" : "string",
          "example" : "Created by admin",
          "description" : "A description of the user"
        },
        "loginName" : {
          "type" : "string",
          "example" : "jbloggs",
          "description" : "A unique login name for the user"
        },
        "email" : {
          "type" : "string",
          "example" : "jbloggs@acmecorp.com",
          "description" : "An email address for the user"
        },
        "phone" : {
          "type" : "string",
          "example" : "+353 (1) 6742000",
          "description" : "The user's phone number"
        },
        "mobile" : {
          "type" : "string",
          "example" : "+353 (89) 6742087",
          "description" : "The user's mobile number"
        },
        "role" : {
          "type" : "string",
          "example" : "user",
          "description" : "The user's role, one of: user, oadmin, or admin"
        },
        "image" : {
          "type" : "string",
          "example" : "resources/photo.jpg",
          "description" : "The user's photo. To update the image, please refer to the API."
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates whether or not the user account is enabled or not"
        },
        "createdOn" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 1367337125476,
          "description" : "Epoch/Unix time stamp when the organization was created"
        },
        "state" : {
          "type" : "string",
          "example" : "approved",
          "description" : "The current state of the account, one of: approved, pending"
        },
        "type" : {
          "type" : "string",
          "example" : "internal",
          "description" : "Indicates the type of user. Possible values: internal, external"
        },
        "orgs2Role" : {
          "type" : "object",
          "example" : {
            "63d434a6-f286-4d0e-9dc9-80b45b0f80f8" : "user"
          },
          "description" : "Maps the organization Id to the user's role for that organization (optional)",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "orgs2Name" : {
          "type" : "object",
          "example" : {
            "63d434a6-f286-4d0e-9dc9-80b45b0f80f8" : "Axway Inc."
          },
          "description" : "Maps the organization Id to the organization name (read-only)",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "authAttrs" : {
          "$ref" : "#/definitions/AuthenticatedUserAttributes"
        },
        "dn" : {
          "type" : "string"
        }
      },
      "description" : "The API Manager user is a member of organizations."
    },
    "Condition" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "LASTTEXT",
          "description" : "The field name"
        },
        "operation" : {
          "type" : "string",
          "example" : "GTEQ",
          "description" : "The field comparison operator."
        },
        "value" : {
          "type" : "string",
          "example" : "Connected",
          "description" : "The value to compare."
        }
      },
      "description" : "Audit trail query condition."
    },
    "ConditionGroup" : {
      "type" : "object",
      "properties" : {
        "conditions" : {
          "type" : "array",
          "description" : "A list of conditions",
          "items" : {
            "$ref" : "#/definitions/Condition"
          }
        },
        "logic" : {
          "type" : "string",
          "example" : "AND",
          "description" : "The AND/OR logic of the condition that applies to all conditions in __conditions__"
        },
        "where" : {
          "type" : "string",
          "example" : "OR",
          "description" : "The AND/OR logic that defines how this ConditionGroup should be applied to the previous group."
        }
      },
      "description" : "Audit trail query conditions."
    },
    "CustomReport" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "Id-0001372322567916-ffffffffec92eba7-1",
          "description" : "The custom report identifier.  Automatically assigned."
        },
        "name" : {
          "type" : "string",
          "example" : "My Report",
          "description" : "The friendly name for the report."
        },
        "type" : {
          "type" : "string",
          "example" : "ServiceUsagePerClient",
          "description" : "The custom report type, one of: SystemOverview, Service, Client, ServiceUsagePerClient, ServiceUsagePerMethod, RemoteHost, or InboundProtocol"
        },
        "levels" : {
          "type" : "array",
          "description" : "The custom report levels definitions.  Only two levels are supported.",
          "items" : {
            "$ref" : "#/definitions/Level"
          }
        }
      },
      "description" : "Analytics custom report."
    },
    "Level" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "ServiceUsagePerClient",
          "description" : "The report level type, one of: SystemOverview, Service, Client, ServiceUsagePerClient, ServiceUsagePerMethod, RemoteHost, or InboundProtocol"
        },
        "chart" : {
          "type" : "string",
          "example" : "line",
          "description" : "The chart type, one of: line"
        },
        "top" : {
          "description" : "Internal use only.",
          "$ref" : "#/definitions/Top"
        },
        "metrics" : {
          "type" : "array",
          "description" : "A list of visible metrics.",
          "items" : {
            "$ref" : "#/definitions/VisibleMetric"
          }
        },
        "groupBy" : {
          "type" : "array",
          "example" : "GROUPNAME,INSTANCENAME,CLIENTNAME,SERVICENAME",
          "description" : "The group by fields.",
          "items" : {
            "type" : "string"
          }
        },
        "conditionGroups" : {
          "type" : "array",
          "description" : "A list of condition groups.",
          "items" : {
            "$ref" : "#/definitions/ConditionGroup"
          }
        },
        "additionalFields" : {
          "type" : "array",
          "example" : "DISPLAYNAME",
          "description" : "Additonal fields to select.",
          "items" : {
            "type" : "string"
          }
        },
        "hiddenFields" : {
          "type" : "array",
          "example" : "CLIENTNAME",
          "description" : "Hidden fields.",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Analytics custom report level definition."
    },
    "Top" : {
      "type" : "object",
      "properties" : {
        "top" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5,
          "description" : "Top value"
        }
      },
      "description" : "Top"
    },
    "VisibleMetric" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "numMessages",
          "description" : "The metric name."
        },
        "visible" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates whether or not the field should appear in the summary report."
        }
      },
      "description" : "Defines a visible metric"
    },
    "Query" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "Id-0001372322567916-ffffffffec92eba7-1",
          "description" : "The query identifier.  Automatically assigned."
        },
        "name" : {
          "type" : "string",
          "example" : "Errors last 5 days",
          "description" : "The friendly name for the query"
        },
        "fieldsToSelect" : {
          "type" : "array",
          "example" : [ "ALERTCOUNT", "ERRORCOUNT", "FATALCOUNT", "LASTTEXT", "LASTSEVERITY", "PASSCOUNT", "GATEWAYNAME", "LOGTIME", "MESSAGEID" ],
          "description" : "The list of fields to select",
          "items" : {
            "type" : "string"
          }
        },
        "conditionGroups" : {
          "type" : "array",
          "description" : "A list of condition groups",
          "items" : {
            "$ref" : "#/definitions/ConditionGroup"
          }
        },
        "summary" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Produce an audit trail summary (condense to one row per-message)"
        }
      },
      "description" : "Audit trail query."
    },
    "Report" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "Id-0001372322567916-ffffffffec92eba7-1",
          "description" : "The report identifier.  Automatically assigned."
        },
        "name" : {
          "type" : "string",
          "example" : "My Report",
          "description" : "The report name."
        },
        "type" : {
          "type" : "string",
          "example" : "pdf",
          "description" : "The report type to generate, one of: pdf, csv"
        },
        "reportGroup" : {
          "type" : "string",
          "example" : "ServiceUsagePerClient",
          "description" : "The report group type, one of: SystemOverview, Service, Client, ServiceUsagePerClient, ServiceUsagePerMethod, RemoteHost, or InboundProtocol"
        },
        "reportParameters" : {
          "type" : "object",
          "example" : {
            "print" : true,
            "level" : 0
          },
          "description" : "Internal use only.  Automatically assigned.",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "customReport" : {
          "description" : "The report definition.",
          "$ref" : "#/definitions/CustomReport"
        },
        "email" : {
          "type" : "string",
          "example" : "somebody@acme.org",
          "description" : "Email recipient(s) to receive the generated report."
        },
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Enables the scheduled report for generation."
        },
        "range" : {
          "type" : "string",
          "example" : "today",
          "description" : "Indicates the report should be run on a time range, i.e. __fromDate__ is not a specific date."
        },
        "fromDate" : {
          "type" : "string",
          "example" : "today",
          "description" : "The starting date for the report."
        },
        "toDate" : {
          "type" : "string",
          "example" : "today",
          "description" : "The end date for the report."
        },
        "scheduled" : {
          "type" : "string",
          "example" : "daily",
          "description" : "The schedule frequency of the report, values one of: daily, weekly, monthly."
        },
        "generateTime" : {
          "type" : "string",
          "example" : "09:00",
          "description" : "The time at which the report should be generated in a 24 hour HH:MM format."
        },
        "dayOfWeek" : {
          "type" : "string",
          "example" : "fri",
          "description" : "The day of the week at which the report should be generated, values one of: mon, tue, wed, thu, fri, sat, sun."
        },
        "dayOfMonth" : {
          "type" : "string",
          "example" : "first",
          "description" : "The day of month at which the report should be generated if __schedule__ is *monthly*, values one of: first, last."
        },
        "lastRun" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 0,
          "description" : "The timestamp of the last time the report was run."
        },
        "timeout" : {
          "type" : "integer",
          "format" : "int64",
          "example" : 30000,
          "description" : "The maximum amount of time to wait for the report to generate."
        }
      },
      "description" : "Analytics report definition"
    },
    "MessageDetails" : {
      "type" : "object",
      "properties" : {
        "details" : {
          "description" : "The HTTP summary details about the message.",
          "$ref" : "#/definitions/SummaryDetails"
        },
        "headers" : {
          "type" : "array",
          "description" : "A list of HTTP headers.",
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Message details"
    },
    "SummaryDetails" : {
      "type" : "object",
      "properties" : {
        "method" : {
          "type" : "string",
          "example" : "GET",
          "description" : "The HTTP method"
        },
        "uri" : {
          "type" : "string",
          "example" : "http://localhost:8080/users",
          "description" : "The HTTP URI"
        }
      },
      "description" : "HTTP summary"
    },
    "MetricField" : {
      "type" : "object",
      "properties" : {
        "metricType" : {
          "type" : "string",
          "example" : "numMessages",
          "description" : "The metric type name",
          "readOnly" : true
        },
        "aggregateName" : {
          "type" : "string",
          "example" : "totalNumMessages",
          "description" : "The metric aggregate name",
          "readOnly" : true
        }
      },
      "description" : "Queryable metric type information"
    },
    "AuditField" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "HOST",
          "description" : "Attribute name."
        },
        "type" : {
          "type" : "string",
          "example" : "String",
          "description" : "Attribute type."
        },
        "valuesUrl" : {
          "type" : "string",
          "example" : "/api/reports/audit/values/HOST",
          "description" : "URL with which to retrieve a list of possible values."
        },
        "custom" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates that the field is a custom field."
        },
        "select" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates that the field can be used in select."
        },
        "condition" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Indicates that the field can be used in a condition."
        },
        "timestampType" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates that the field is a timestamp."
        },
        "binaryType" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates that the field is binary."
        }
      },
      "description" : "Audit field to be used in the audit [Query](Query.html) and [Condition](Condition.html)"
    },
    "Group" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "services" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Service"
          }
        },
        "lock" : {
          "$ref" : "#/definitions/Lock"
        }
      }
    },
    "Host" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "Lock" : {
      "type" : "object",
      "properties" : {
        "locker" : {
          "type" : "string"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Service" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string",
          "enum" : [ "gateway", "nodemanager" ]
        },
        "scheme" : {
          "type" : "string"
        },
        "hostID" : {
          "type" : "string"
        },
        "managementPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "tags" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "enabled" : {
          "type" : "boolean"
        }
      }
    },
    "Topology" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "productVersion" : {
          "type" : "string"
        },
        "hosts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Host"
          }
        },
        "groups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        },
        "uniqueIdCounters" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "emtEnabled" : {
          "type" : "boolean"
        },
        "services" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Service"
          }
        }
      }
    },
    "CreateCSRRequestBody" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "$ref" : "#/definitions/Service"
        },
        "keyPassphrase" : {
          "type" : "string"
        }
      }
    },
    "InstanceInfo" : {
      "type" : "object",
      "properties" : {
        "instance" : {
          "$ref" : "#/definitions/Service"
        },
        "archive" : {
          "$ref" : "#/definitions/DeploymentArchive"
        },
        "passphrase" : {
          "type" : "string"
        },
        "keyPassphrase" : {
          "type" : "string"
        }
      }
    },
    "ApiResponseTopology" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/Topology"
        }
      }
    },
    "DomainStatus" : {
      "type" : "object",
      "properties" : {
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        },
        "disrupted" : {
          "type" : "boolean"
        },
        "topologyInSync" : {
          "type" : "boolean"
        },
        "adminUsersInSync" : {
          "type" : "boolean"
        },
        "nodes" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NodeDetail"
          }
        },
        "newestTopologyVersion" : {
          "$ref" : "#/definitions/TopologyVersion"
        },
        "newestAdminUsersVersion" : {
          "$ref" : "#/definitions/AdminUsersVersion"
        },
        "newestGroupSettingsVersion" : {
          "$ref" : "#/definitions/GroupSettingsVersion"
        }
      }
    },
    "NodeDetail" : {
      "type" : "object",
      "properties" : {
        "topologyInSync" : {
          "type" : "boolean"
        },
        "adminUsersInSync" : {
          "type" : "boolean"
        },
        "groupSettingsInSync" : {
          "type" : "boolean"
        },
        "topologyVersion" : {
          "$ref" : "#/definitions/TopologyVersion"
        },
        "adminUsersVersion" : {
          "$ref" : "#/definitions/AdminUsersVersion"
        },
        "groupSettingsVersion" : {
          "$ref" : "#/definitions/GroupSettingsVersion"
        },
        "lastContact" : {
          "type" : "integer",
          "format" : "int64"
        },
        "topologyRank" : {
          "type" : "integer",
          "format" : "int32"
        },
        "adminUsersRank" : {
          "type" : "integer",
          "format" : "int32"
        },
        "admin" : {
          "type" : "boolean"
        },
        "alive" : {
          "type" : "boolean"
        },
        "serviceId" : {
          "type" : "string"
        }
      }
    },
    "TopologyVersion" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "GatewayDetails" : {
      "type" : "object",
      "properties" : {
        "groupName" : {
          "type" : "string"
        },
        "instanceID" : {
          "type" : "string"
        },
        "hostAddress" : {
          "type" : "string"
        },
        "hostPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "productVersion" : {
          "type" : "string"
        },
        "image" : {
          "type" : "string"
        },
        "parentHostID" : {
          "type" : "string"
        },
        "parentCpuCores" : {
          "type" : "integer",
          "format" : "int32"
        },
        "licensedFeatures" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "transactions" : {
          "type" : "integer",
          "format" : "int64"
        },
        "andClearTransactions" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ApiResponseStringArray" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SignCSRRequestBody" : {
      "type" : "object",
      "properties" : {
        "domainPassphrase" : {
          "type" : "string"
        }
      }
    },
    "ApiResponseCollectionService" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Service"
          }
        }
      }
    },
    "ApiResponseService" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/Service"
        }
      }
    },
    "ApiResponseGroup" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/Group"
        }
      }
    },
    "ApiResponseCollectionHost" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Host"
          }
        }
      }
    },
    "CreateServiceRequestBody" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "$ref" : "#/definitions/Service"
        },
        "passphrase" : {
          "type" : "string"
        },
        "domainPassphrase" : {
          "type" : "string"
        },
        "keyPassphrase" : {
          "type" : "string"
        },
        "initFirstGatewayWithYaml" : {
          "type" : "boolean"
        }
      }
    },
    "CreateServiceWithCertRequestBody" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "$ref" : "#/definitions/Service"
        },
        "passphrase" : {
          "type" : "string"
        },
        "keyPassphrase" : {
          "type" : "string"
        },
        "initFirstGatewayWithYaml" : {
          "type" : "boolean"
        }
      }
    },
    "ApiResponseCollectionGroup" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        }
      }
    },
    "ApiResponseHost" : {
      "type" : "object",
      "properties" : {
        "errors" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ApiError"
          }
        },
        "result" : {
          "$ref" : "#/definitions/Host"
        }
      }
    },
    "alias" : {
      "type" : "object",
      "properties" : {
        "alias" : {
          "type" : "string"
        },
        "identity" : {
          "type" : "string"
        }
      },
      "xml" : {
        "name" : "alias"
      }
    },
    "model" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "types" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/type"
          }
        },
        "stores" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/store"
          }
        },
        "aliases" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/alias"
          }
        }
      },
      "xml" : {
        "name" : "model"
      }
    },
    "store" : {
      "type" : "object",
      "properties" : {
        "identity" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "typeId" : {
          "type" : "string"
        },
        "implId" : {
          "type" : "string"
        },
        "config" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "xml" : {
        "name" : "store"
      }
    },
    "type" : {
      "type" : "object",
      "properties" : {
        "identity" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      },
      "xml" : {
        "name" : "type"
      }
    }
  }
}